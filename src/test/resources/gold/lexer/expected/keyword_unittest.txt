DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Sum')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('add')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
WHITE_SPACE (' ')
DLangTokenType.+ ('+')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Sum')
WHITE_SPACE (' ')
DLangTokenType.ID ('sum')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.new ('new')
WHITE_SPACE (' ')
DLangTokenType.ID ('Sum')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('sum')
DLangTokenType.. ('.')
DLangTokenType.ID ('add')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('sum')
DLangTokenType.. ('.')
DLangTokenType.ID ('add')
DLangTokenType.( ('(')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
