DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('stdio')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('pz')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.pure ('pure')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('             ')
DLangTokenType.char ('char')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('             ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('q')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('             ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.debug ('debug')
WHITE_SPACE (' ')
DLangTokenType.ID ('writeln')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"in foo()"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// ok, impure code allowed in debug statement')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('x')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.line_comment ('// error, modifying global state')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.line_comment ('// error, reading mutable global state')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.line_comment ('// ok, reading immutable global state')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
DLangTokenType.ID ('pz')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// error, reading const global state')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')