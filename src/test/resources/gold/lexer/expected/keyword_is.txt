DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('stdio')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('main')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.cast ('cast')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
