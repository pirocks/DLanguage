DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('k')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.version ('version')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Demo')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// compile in this code block for the demo version')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('k')
DLangTokenType.; (';')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// error, k already defined')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.ID ('x')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')