DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('stdio')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('main')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.== ('==')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('     ')
DLangTokenType.ID ('writeln')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"no"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('     ')
DLangTokenType.ID ('writeln')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"yes"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
