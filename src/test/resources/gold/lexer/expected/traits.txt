DLangTokenType.line_comment ('// Written in the D programming language.')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Templates which extract information about types and symbols at compile time.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(SCRIPT inhibitQuickIndex = 1;)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(DIVC quickindex,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(BOOKTABLE ,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TH Category) $(TH Templates))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD Symbol Name _traits) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF fullyQualifiedName)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF moduleName)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF packageName)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD Function _traits) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isFunction)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF arity)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF functionAttributes)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF functionLinkage)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF FunctionTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isSafe)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isUnsafe)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isFinal)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ParameterDefaults)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ParameterIdentifierTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ParameterStorageClassTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF Parameters)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ReturnType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF SetFunctionAttributes)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF variadicFunctionStyle)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD Aggregate Type _traits) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF BaseClassesTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF BaseTypeTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF classInstanceAlignment)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF EnumMembers)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF FieldNameTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF Fields)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasAliasing)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasElaborateAssign)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasElaborateCopyConstructor)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasElaborateDestructor)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasIndirections)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasMember)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasNested)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasUnsharedAliasing)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF InterfacesTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isInnerClass)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isNested)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF MemberFunctionsTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF RepresentationTypeTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF TemplateArgsOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF TemplateOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF TransitiveBaseTypeTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD Type Conversion) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF CommonType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ImplicitConversionTargets)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF CopyTypeQualifiers)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF CopyConstness)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isAssignable)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isCovariantWith)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isImplicitlyConvertible)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD SomethingTypeOf) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF BooleanTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF IntegralTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF FloatingPointTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF NumericTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF UnsignedTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF SignedTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF CharTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF StaticArrayTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF DynamicArrayTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ArrayTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF StringTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF AssocArrayTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF BuiltinTypeOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD Categories of types) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isAggregateType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isArray)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isAssociativeArray)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isAutodecodableString)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isBasicType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isBoolean)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isBuiltinType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isCopyable)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isDynamicArray)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isFloatingPoint)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isIntegral)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isNarrowString)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isNumeric)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isPointer)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isScalarType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isSigned)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isSomeChar)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isSomeString)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isStaticArray)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isUnsigned)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD Type behaviours) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isAbstractClass)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isAbstractFunction)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isCallable)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isDelegate)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isExpressions)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isFinalClass)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isFinalFunction)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isFunctionPointer)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isInstanceOf)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isIterable)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isMutable)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isSomeFunction)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF isTypeTuple)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD General Types) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ForeachType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF KeyType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF Largest)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF mostNegative)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF OriginalType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF PointerTarget)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF Signed)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF Unqual)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF Unsigned)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF ValueType)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD Misc) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF mangledName)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF Select)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF select)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(TR $(TD User-Defined Attributes) $(TD')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF hasUDA)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF getUDAs)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('           $(LREF getSymbolsByUDA)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' ))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' )')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' )')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Copyright: Copyright Digital Mars 2005 - 2009.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' License:   $(HTTP www.boost.org')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('LICENSE_1_0.txt, Boost License 1.0).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Authors:   $(HTTP digitalmars.com, Walter Bright),')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('            Tomasz Stachowiak ($(D isExpressions)),')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('            $(HTTP erdani.org, Andrei Alexandrescu),')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('            Shin Fujishiro,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('            $(HTTP octarineparrot.com, Robert Clipsham),')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('            $(HTTP klickverbot.at, David Nadlinger),')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('            Kenji Hara,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('            Shoichi Kato')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Source:    $(PHOBOSSRC std')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('_traits.d)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('          Copyright Digital Mars 2005 - 2009.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Distributed under the Boost Software License, Version 1.0.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('    (See accompanying file LICENSE_1_0.txt or copy at')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('          http:')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('www.boost.org')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('LICENSE_1_0.txt)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.module ('module')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typetuple')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// TypeTuple')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///////////////////////////////////////////////////////////////////////////////')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// Functions')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('///////////////////////////////////////////////////////////////////////////////')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// Petit demangler')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// (this or similar thing will eventually go to std.demangle if necessary')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//  ctfe stuffs are available)')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Demangle')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('T')
WHITE_SPACE ('       ')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// extracted information')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE ('  ')
DLangTokenType.ID ('rest')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment (' Demangles mstr as the storage class part of Argument. ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('Demangle')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleParameterStorageClass')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('pstc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// parameter storage class')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Argument --> Argument2 | M Argument2')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('mstr')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.> ('>')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''M'')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('pstc')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.. ('.')
DLangTokenType.ID ('scope_')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('mstr')
WHITE_SPACE ('  ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Argument2 --> Type | J Type | K Type | L Type')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('ParameterStorageClass')
WHITE_SPACE (' ')
DLangTokenType.ID ('stc2')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.switch ('switch')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('mstr')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''J'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('stc2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.. ('.')
DLangTokenType.ID ('out_')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''K'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('stc2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''L'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('stc2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.. ('.')
DLangTokenType.ID ('lazy_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''N'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('mstr')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''k'')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.ID ('stc2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                      ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.default ('default')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('stc2')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('pstc')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('stc2')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('mstr')
WHITE_SPACE ('  ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('stc2')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('mstr')
WHITE_SPACE ('  ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('Demangle')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.( ('(')
DLangTokenType.ID ('pstc')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment (' Demangles mstr as FuncAttrs. ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('Demangle')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleFunctionAttributes')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('LOOKUP_ATTRIBUTE')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.[ ('[')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''a'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''b'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''c'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''d'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''e'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''f'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''i'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''j'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('atts')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// FuncAttrs --> FuncAttr | FuncAttr FuncAttrs')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// FuncAttr  --> empty | Na | Nb | Nc | Nd | Ne | Nf | Ni | Nj')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// except 'Ng' == inout, because it is a qualifier of function type')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.while ('while')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('mstr')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''N'')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''g'')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''k'')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionAttribute')
WHITE_SPACE (' ')
DLangTokenType.ID ('att')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('LOOKUP_ATTRIBUTE')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('atts')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('att')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('mstr')
WHITE_SPACE ('  ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('Demangle')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.( ('(')
DLangTokenType.ID ('atts')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('mstr')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
WHITE_SPACE ('         ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('cent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedCentTypeList')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('cent')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UnsignedCentTypeList')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
WHITE_SPACE ('         ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedCentTypeList')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UnsignedCentTypeList')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeList')
WHITE_SPACE ('      ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.byte ('byte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedIntTypeList')
WHITE_SPACE ('     ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.byte ('byte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedCentTypeList')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UnsignedIntTypeList')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ubyte ('ubyte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UnsignedCentTypeList')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeList')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
WHITE_SPACE ('     ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ifloat ('ifloat')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.idouble ('idouble')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ireal ('ireal')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.cfloat ('cfloat')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.cdouble ('cdouble')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.creal ('creal')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeList')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeList')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
WHITE_SPACE ('          ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.package ('package')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('/// Add specific qualifier to the given type T.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('MutableOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('     ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('MutableOf')
WHITE_SPACE ('     ')
DLangTokenType.= ('=')
WHITE_SPACE ('              ')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// Add specific qualifier to the given type T.')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('       ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('/// ditto.')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ConstOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('       ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ConstOf')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE ('        ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('/// ditto.')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('      ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedOf')
WHITE_SPACE ('      ')
DLangTokenType.= ('=')
WHITE_SPACE ('       ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('/// ditto.')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('/// ditto.')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedConstOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedConstOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('/// ditto.')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmutableOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmutableOf')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE ('    ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE ('    ')
DLangTokenType.ID ('MutableOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('              ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE ('      ')
DLangTokenType.ID ('InoutOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE ('      ')
DLangTokenType.ID ('ConstOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE ('     ')
DLangTokenType.ID ('SharedOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('SharedConstOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE ('  ')
DLangTokenType.ID ('ImmutableOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('    ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// Get qualifier template from the given type T')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('         ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedConstOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ConstOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('    ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmutableOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('       ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('                                         ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('MutableOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Qual1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('             ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Qual1')
DLangTokenType.! ('!')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('              ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Qual2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('       ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Qual2')
DLangTokenType.! ('!')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Qual3')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Qual3')
DLangTokenType.! ('!')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Qual4')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Qual4')
DLangTokenType.! ('!')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Qual5')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Qual5')
DLangTokenType.! ('!')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Qual6')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Qual6')
DLangTokenType.! ('!')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Qual7')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifierOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('   ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Qual7')
DLangTokenType.! ('!')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('    ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.version ('version')
DLangTokenType.( ('(')
DLangTokenType.unittest ('unittest')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('MutableOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ConstOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedConstOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmutableOf')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('parentOf')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('sym')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Identity')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('sym')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('parentOf')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('sym')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.! ('!')
DLangTokenType.ID ('Args')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Identity')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get the full package name for the given symbol.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('packageName')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('algorithm')
DLangTokenType.. ('.')
DLangTokenType.ID ('searching')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('startsWith')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('parentOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('parent')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('parentOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('parent')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.null ('null')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.. ('.')
DLangTokenType.ID ('startsWith')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"package "')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('packageName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.ID ('parent')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''.'')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('8')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('packageName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('parent')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" has no parent"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('packageName')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('array')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Commented out because of dmd @@@BUG8922@@@')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// static assert(packageName!std == "std");  // this package (currently: "std.std")')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('     ')
DLangTokenType.line_comment ('// this module')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('packageName')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('      ')
DLangTokenType.line_comment ('// symbol in this module')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('array')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// other module from same package')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.. ('.')
DLangTokenType.ID ('barrier')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// local import')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('core')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('Barrier')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('X12287')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('X12287')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.. ('.')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.version ('version')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.version ('version')
DLangTokenType.( ('(')
DLangTokenType.unittest ('unittest')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('//Please uncomment me when changing packageName to test global imports')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.. ('.')
DLangTokenType.ID ('barrier')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// global import')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('core')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('Barrier')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get the module name (including package) for the given symbol.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('moduleName')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('algorithm')
DLangTokenType.. ('.')
DLangTokenType.ID ('searching')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('startsWith')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.. ('.')
DLangTokenType.ID ('startsWith')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"package "')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"cannot get the module name for a package"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.. ('.')
DLangTokenType.ID ('startsWith')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"module "')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('packagePrefix')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('packageName')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''.'')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('packagePrefix')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('moduleName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('packagePrefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('7')
DLangTokenType... ('..')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('moduleName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('parentOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// If you use enum, it will cause compiler ICE')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.ID ('moduleName')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('array')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.ID ('std')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// this module')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.ID ('moduleName')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('              ')
DLangTokenType.line_comment ('// symbol in this module')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('array')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.array"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('      ')
DLangTokenType.line_comment ('// other module')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('array')
DLangTokenType.. ('.')
DLangTokenType.ID ('array')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.array"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// symbol in other module')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.. ('.')
DLangTokenType.ID ('barrier')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// local import')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.. ('.')
DLangTokenType.ID ('barrier')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync.barrier"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.ID ('Barrier')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync.barrier"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('X12287')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('X12287')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.. ('.')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.version ('version')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.version ('version')
DLangTokenType.( ('(')
DLangTokenType.unittest ('unittest')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('//Please uncomment me when changing moduleName to test global imports')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.. ('.')
DLangTokenType.ID ('barrier')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// global import')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.. ('.')
DLangTokenType.ID ('barrier')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync.barrier"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('moduleName')
DLangTokenType.! ('!')
DLangTokenType.ID ('Barrier')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync.barrier"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get the fully qualified name of a type or a symbol. Can act as an intelligent type')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('symbol to string  converter.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Example:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('-----------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('module myModule;')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('struct MyStruct {}')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('static assert(fullyQualifiedName!(const MyStruct[]) == "const(myModule.MyStruct[])");')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('-----------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('fullyQualifiedName')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fullyQualifiedName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fullyQualifiedName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnSym')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fullyQualifiedName')
DLangTokenType.! ('!')
DLangTokenType.ID ('fullyQualifiedName')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits.fullyQualifiedName"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.version ('version')
DLangTokenType.( ('(')
DLangTokenType.unittest ('unittest')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Used for both fqnType and fqnSym unittests')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifiedNameTests')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Inner')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
WHITE_SPACE (' ')
DLangTokenType.ID ('var1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.lazy ('lazy')
WHITE_SPACE (' ')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('var2')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Inner')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('retfunc')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
WHITE_SPACE (' ')
DLangTokenType.ID ('var1')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Inner')
WHITE_SPACE (' ')
DLangTokenType.ID ('inoutFunc')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Inner')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('data')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.nothrow ('nothrow')
WHITE_SPACE (' ')
DLangTokenType.ID ('deleg')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('inoutDeleg')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Inner')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.out ('out')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('funcPtr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('cFuncPtr')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('cVarArg')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('dVarArg')
DLangTokenType.( ('(')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('dVarArg2')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('typesafeVarArg')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Inner')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('array')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Inner')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('16')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('sarray')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Inner')
DLangTokenType.[ ('[')
DLangTokenType.ID ('Inner')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('aarray')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Inner')
DLangTokenType.[ ('[')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Inner')
DLangTokenType.) (')')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualAarray')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('Inner')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.nothrow ('nothrow')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrDeleg')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Data')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('tfunc')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('args')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inst')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test12309')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifiedEnum')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnSym')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.! ('!')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('fullyQualifiedName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('", "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnSym')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('fqnSym')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.CHARACTER_LITERAL (''.'')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('identifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"!("')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('")"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnSym')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('parentPrefix')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnSym')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"."')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('parentPrefix')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.null ('null')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('adjustIdent')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('algorithm')
DLangTokenType.. ('.')
DLangTokenType.ID ('searching')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('findSplit')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('skipOver')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('s')
DLangTokenType.. ('.')
DLangTokenType.ID ('skipOver')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"package "')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.. ('.')
DLangTokenType.ID ('skipOver')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"module "')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.. ('.')
DLangTokenType.ID ('findSplit')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"("')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnSym')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('parentPrefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('adjustIdent')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('identifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqn')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('fullyQualifiedName')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Make sure those 2 are the same')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqnSym')
DLangTokenType.! ('!')
DLangTokenType.ID ('fqn')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.ID ('fqn')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.ID ('fqn')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits.fullyQualifiedName"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('qnTests')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('QualifiedNameTests')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits.QualifiedNameTests."')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('Inner')
DLangTokenType.) (')')
WHITE_SPACE ('           ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Inner"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('            ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"func"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('Data')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE ('        ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Data!(int)"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('Data')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.. ('.')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
WHITE_SPACE ('      ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Data!(int).x"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('tfunc')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"tfunc!(int[])"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('Inst')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Inst!(object.Object)"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('Inst')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Inst!(object.Object).x"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('qnTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('Test12309')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('10')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"str"')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                                ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('prefix')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Test12309!(int, 10, \"str\")"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('sync')
DLangTokenType.. ('.')
DLangTokenType.ID ('barrier')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.ID ('Barrier')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"core.sync.barrier.Barrier"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('alreadyConst')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('alreadyImmutable')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('alreadyShared')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('alreadyInout')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('format')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Convenience tags')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('_const')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('_immutable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('_shared')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('_inout')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifiers')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('noQualifiers')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('storageClassesString')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('psc')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('PSC')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s%s%s%s%s"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('psc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('PSC')
DLangTokenType.. ('.')
DLangTokenType.ID ('scope_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"scope "')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('psc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('PSC')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"return "')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('psc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('PSC')
DLangTokenType.. ('.')
DLangTokenType.ID ('out_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"out "')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('psc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('PSC')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"ref "')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('psc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('PSC')
DLangTokenType.. ('.')
DLangTokenType.ID ('lazy_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"lazy "')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('parametersTypeString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('parameters')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('parameterStC')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadic')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadic')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('no')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicStr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadic')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicStr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('", ..."')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadic')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('d')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicStr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('parameters')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('", ..."')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"..."')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadic')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('typesafe')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicStr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" ..."')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"New variadic style has been added, please update fullyQualifiedName implementation"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('parameters')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('algorithm')
DLangTokenType.. ('.')
DLangTokenType.ID ('iteration')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('map')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('array')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('join')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticMap')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('range')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('zip')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('join')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('map')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.=> ('=>')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s%s"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('zip')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('staticMap')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('storageClassesString')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('parameterStC')
DLangTokenType.) (')')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.[ ('[')
DLangTokenType.ID ('staticMap')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('fullyQualifiedName')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('parameters')
DLangTokenType.) (')')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.DOUBLE_QUOTED_STRING ('", "')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicStr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicStr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkageString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('linkage')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"extern(%s) "')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributeString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s%s%s%s%s%s%s%s"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" pure"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" nothrow"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" ref"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @property"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @trusted"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @safe"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @nogc"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" return"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('addQualifiers')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('typeString')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('addConst')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('addImmutable')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('addShared')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('addInout')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('typeString')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('addShared')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"shared(%s)"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('addConst')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('addImmutable')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('addInout')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s(%s)"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('addConst')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"const"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('addImmutable')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"immutable"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"inout"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('result')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Convenience template to avoid copy-paste')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('current')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('addQualifiers')
DLangTokenType.( ('(')
DLangTokenType.ID ('current')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.[ ('[')
DLangTokenType.ID ('_const')
DLangTokenType.] (']')
WHITE_SPACE ('     ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.ID ('alreadyConst')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.[ ('[')
DLangTokenType.ID ('_immutable')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.ID ('alreadyImmutable')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.[ ('[')
DLangTokenType.ID ('_shared')
DLangTokenType.] (']')
WHITE_SPACE ('    ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.ID ('alreadyShared')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.[ ('[')
DLangTokenType.ID ('_inout')
DLangTokenType.] (']')
WHITE_SPACE ('     ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.ID ('alreadyInout')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"string"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('wstring')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"wstring"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('dstring')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"dstring"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isBasicType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqnSym')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s[%s]"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s[]"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s[%s]"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ValueType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('KeyType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('noQualifiers')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifierString')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s%s"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" shared"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" inout"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" immutable"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" const"')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('formatStr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s%s delegate(%s)%s%s"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.ID ('formatStr')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkageString')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('noQualifiers')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('parametersTypeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributeString')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifierString')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('formatStr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s%s function(%s)%s"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('formatStr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s%s(%s)%s"')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.ID ('formatStr')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkageString')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('noQualifiers')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('parametersTypeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributeString')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s*"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('PointerTarget')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('N')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('N')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('chain')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"__vector(%s[%s])"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('qualifiers')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('N')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('   ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// In case something is forgotten')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Unrecognized type "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('", can't convert to fully qualified string"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('format')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqn')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('fullyQualifiedName')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Verify those 2 are the same for simple case')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ambiguous')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('QualifiedNameTests')
DLangTokenType.. ('.')
DLangTokenType.ID ('Inner')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.ID ('Ambiguous')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('fqnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Ambiguous')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Main tests')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits.QualifiedNameTests.Inner"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.with ('with')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('QualifiedNameTests')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Special cases')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"string"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('wstring')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"wstring"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('dstring')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"dstring"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Basic qualified name')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Inner')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('QualifiedEnum')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits.QualifiedEnum"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// type')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('QualifiedEnum')
DLangTokenType.. ('.')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"std.traits.QualifiedEnum.a"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// symbol')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Array types')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('array')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s[]"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('sarray')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s[16]"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('aarray')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s[%s]"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// qualified key for AA')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('qualAarray')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"const(%s[const(%s)])"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Qualified composed data types')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('data')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"shared(const(%s[string])[])"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Function types + function attributes')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"const(%s[string])(ref %s, scope lazy string) ref"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('retfunc')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"const(%s[string])(return %s) ref"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('inoutFunc')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"inout(%s(inout(%s)))"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('deleg')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"const(%s delegate(double, string) nothrow @safe)"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('inoutDeleg')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"inout(int) delegate(inout(int)) inout"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('funcPtr')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"%s function(out double, string)"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('cFuncPtr')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"extern(C) %s function(double, string)"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Delegate type with qualified function type')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrDeleg')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"shared(immutable(%s) "')
DLangTokenType.~ ('~')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"delegate(ref double, scope string) nothrow @trusted shared const)"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('inner_name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Variable argument function types')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('cVarArg')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"extern(C) void(int, ...)"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('dVarArg')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"void(...)"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('dVarArg2')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"void(int, ...)"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('typesafeVarArg')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"void(int[] ...)"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// SIMD vector')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('fqn')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"__vector(float[4])"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get the type of the return value from a function,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' a pointer to function, a delegate, a struct')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' with an opCall, a pointer to a struct with an opCall,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' or a class with an $(D opCall). Please note that $(D_KEYWORD ref)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' is not part of a type, but the attribute of the function')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' (see template $(LREF functionAttributes)).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.ID ('R')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('R')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"argument has no return type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.line_comment ('// x is declared as int')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('G')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ShouldBeInt')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('G')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ShouldBeInt')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('G')
WHITE_SPACE (' ')
DLangTokenType.ID ('g')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('g')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('G')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('pg')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('pg')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('R_Test_prop')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R_Test_prop')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('R_dglit')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R_dglit')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Get, as a tuple, the types of the parameters to a function, a pointer')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('to function, a delegate, a struct with an $(D opCall), a pointer to a')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('struct with an $(D opCall), or a class with an $(D opCall).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.ID ('P')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('P')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"argument has no parameters"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('      ')
DLangTokenType.line_comment ('// declares void bar(int, long);')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('abc')
DLangTokenType.( ('(')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('   ')
DLangTokenType.line_comment ('// declares void abc(long);')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Alternate name for $(LREF Parameters), kept for legacy compatibility.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('r')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('0.0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('P_Test_prop')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('P_Test_prop')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('P_dglit')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('P_dglit')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('P_dglit')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the number of arguments of function $(D func).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('arity is undefined for variadic functions.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('arity')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('no')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('arity')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('arity')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.== ('==')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('arity')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.== ('==')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFoo')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('arity')
DLangTokenType.! ('!')
DLangTokenType.ID ('variadicFoo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns a tuple consisting of the storage classes of the parameters of a')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('function $(D func).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' These flags can be bitwise OR-ed together to represent complex storage')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' class.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('none')
WHITE_SPACE ('    ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('scope_')
WHITE_SPACE ('  ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('out_')
WHITE_SPACE ('    ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType., (',')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('ref_')
WHITE_SPACE ('    ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType., (',')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('lazy_')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('8')
DLangTokenType., (',')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('return_')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0x10')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Func')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' TypeFuncion:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     CallConvention FuncAttrs Arguments ArgClose Type')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Params')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.ID ('Func')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// chop off CallConvention and FuncAttrs')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('margs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleFunctionAttributes')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('Func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('rest')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// demangle Arguments and store parameter storage classes in a tuple')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleNextParameter')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('margs')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.< ('<')
WHITE_SPACE (' ')
DLangTokenType.ID ('Params')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('demang')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleParameterStorageClass')
DLangTokenType.( ('(')
DLangTokenType.ID ('margs')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('skip')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Params')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// for bypassing Type')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('demang')
DLangTokenType.. ('.')
DLangTokenType.ID ('rest')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleNextParameter')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('demang')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.+ ('+')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// workaround: "not evaluatable at ..."')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('demangleNextParameter')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.ID ('skip')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.+ ('+')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// went thru all the parameters')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleNextParameter')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangleNextParameter')
DLangTokenType.! ('!')
DLangTokenType.ID ('margs')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// shorten the enum name')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('ctx')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.out ('out')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('param')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('pstc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('pstc')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// three parameters')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('out_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('noparam')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('noparam')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.out ('out')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.lazy ('lazy')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('test_pstc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('test')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_pstc')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('scope_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('out_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('lazy_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test_const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test_sharedconst')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('Test')
WHITE_SPACE (' ')
DLangTokenType.ID ('testi')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('test_const_pstc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('test_const')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_const_pstc')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_const_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('test_sharedconst_pstc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('testi')
DLangTokenType.. ('.')
DLangTokenType.ID ('test_sharedconst')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_sharedconst_pstc')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test_sharedconst_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('dglit_pstc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('dglit_pstc')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('dglit_pstc')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Bugzilla 9317')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('param')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('param')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Bugzilla 14253')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
WHITE_SPACE (' ')
DLangTokenType.ID ('rhs')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('tup')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getOverloads')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"opAssign"')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Get, as a tuple, the identifiers of the parameters to a function symbol.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterIdentifierTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.__parameters ('__parameters')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Delegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.line_comment ('// Unnamed parameters yield CT error.')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('identifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType... ('..')
DLangTokenType.ID ('i')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('identifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType... ('..')
DLangTokenType.ID ('i')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"is not a function"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Define dummy entities to avoid pointless errors')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Get')
DLangTokenType.! ('!')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterIdentifierTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('num')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('ParameterIdentifierTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.DOUBLE_QUOTED_STRING ('"num"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"name"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('PIT')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterIdentifierTuple')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('num')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('array')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('PIT')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.DOUBLE_QUOTED_STRING ('"num"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"name"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"array"')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// might be changed in the future?')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('num')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('fp')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('PIT')
DLangTokenType.! ('!')
DLangTokenType.ID ('fp')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// might be changed in the future?')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('num')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.long ('long')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('aa')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('dg')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('PIT')
DLangTokenType.! ('!')
DLangTokenType.ID ('dg')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('getter')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('setter')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Test')
WHITE_SPACE (' ')
DLangTokenType.ID ('method')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('PIT')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('getter')
DLangTokenType.) (')')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('PIT')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('setter')
DLangTokenType.) (')')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('PIT')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('method')
DLangTokenType.) (')')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"b"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"c"')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('/+')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    ')
DLangTokenType.NESTING_BLOCK_COMMENT ('/')
DLangTokenType.NESTING_BLOCK_COMMENT ('/')
DLangTokenType.NESTING_BLOCK_COMMENT (' depends on internal')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    void baw(int, string, int[]){}')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    static assert([PIT!baw] == ["_param_0", "_param_1", "_param_2"]);')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    ')
DLangTokenType.NESTING_BLOCK_COMMENT ('/')
DLangTokenType.NESTING_BLOCK_COMMENT ('/')
DLangTokenType.NESTING_BLOCK_COMMENT (' depends on internal')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    void baz(TypeTuple!(int, string, int[]) args){}')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    static assert([PIT!baz] == ["_param_0", "_param_1", "_param_2"]);')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('+/')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Get, as a tuple, the default value of the parameters to a function symbol.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('If a parameter doesn't have the default value, $(D void) is returned instead.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterDefaults')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.__parameters ('__parameters')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParamName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterIdentifierTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// workaround scope escape check, see')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// https://issues.dlang.org/show_bug.cgi?id=16582')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// should use return scope once available')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParamName')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('PT')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType... ('..')
DLangTokenType.ID ('i')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('PT')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('__pd_val')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
DLangTokenType.mixin ('mixin')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParamName')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// workaround Bugzilla 16582')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
DLangTokenType.ID ('__pd_val')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// Unnamed parameter')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('PT')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType... ('..')
DLangTokenType.ID ('i')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('__args')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('PT')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
DLangTokenType.ID ('__args')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// workaround Bugzilla 16582')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
DLangTokenType.ID ('val')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('get')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('get')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('// If default arg doesn't exist, returns void instead.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.__parameters ('__parameters')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"is not a function"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Define dummy entities to avoid pointless errors')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Get')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('PT')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Get')
DLangTokenType.! ('!')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterDefaults')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('num')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ParameterDefaults')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE ('   ')
DLangTokenType.ID ('ParameterDefaults')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE ('   ')
DLangTokenType.ID ('ParameterDefaults')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Alternate name for $(LREF ParameterDefaults), kept for legacy compatibility.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterDefaultValueTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterDefaults')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('PDVT')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterDefaultValueTuple')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('baz')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('baz')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('baz')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE ('   ')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('baz')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE ('   ')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('baz')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('baz')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// bug 10800 - property functions return empty string')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Colour')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ubyte ('ubyte')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
DLangTokenType.ID ('r')
DLangTokenType., (',')
DLangTokenType.ID ('g')
DLangTokenType., (',')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Colour')
WHITE_SPACE (' ')
DLangTokenType.ID ('white')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Colour')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('255')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('255')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('255')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('255')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bug8106')
DLangTokenType.( ('(')
DLangTokenType.ID ('Colour')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Colour')
DLangTokenType.. ('.')
DLangTokenType.ID ('white')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//pragma(msg, PDVT!bug8106);')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('bug8106')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Colour')
DLangTokenType.. ('.')
DLangTokenType.ID ('white')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bug16582')
DLangTokenType.( ('(')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.null ('null')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('PDVT')
DLangTokenType.! ('!')
DLangTokenType.ID ('bug16582')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the attributes attached to a function $(D func).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' These flags can be bitwise OR-ed together to represent a complex attribute.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('     ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('none')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('pure_')
WHITE_SPACE ('      ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('ref_')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('property')
WHITE_SPACE ('   ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('trusted')
WHITE_SPACE ('    ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('safe')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('nogc')
WHITE_SPACE ('       ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('6')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('system')
WHITE_SPACE ('     ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('7')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('const_')
WHITE_SPACE ('     ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('8')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('immutable_')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('9')
DLangTokenType., (',')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('inout_')
WHITE_SPACE ('     ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('10')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('shared_')
WHITE_SPACE ('    ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('11')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('return_')
WHITE_SPACE ('    ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.<< ('<<')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('12')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// @bug: workaround for opCall')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncSym')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Select')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getFunctionAttributes')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                            ')
DLangTokenType.ID ('func')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('extractAttribFlags')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getFunctionAttributes')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncSym')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// shorten the enum name')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.pure ('pure')
WHITE_SPACE (' ')
DLangTokenType.nothrow ('nothrow')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// not @trusted')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('noF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('constF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('immutableF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('inoutF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('sharedF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('refF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('propertyF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('nothrowF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.nothrow ('nothrow')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('nogcF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('pureF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.pure ('pure')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('noF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('noF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('constF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('constF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('immutableF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('immutable_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('immutableF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('immutable_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('inoutF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('inout_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('inoutF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('inout_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('sharedF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('shared_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('sharedF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('shared_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('refF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('refF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('propertyF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('propertyF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrowF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrowF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogcF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogcF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('systemF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('systemF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('trustedF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('trustedF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('safeF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('safeF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('pureF')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('pureF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('pure_nothrow')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.nothrow ('nothrow')
WHITE_SPACE (' ')
DLangTokenType.pure ('pure')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('safe_nothrow')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.nothrow ('nothrow')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('static_ref_property')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('ref_property')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('pure_nothrow')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('pure_nothrow')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('safe_nothrow')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('safe_nothrow')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('static_ref_property')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('static_ref_property')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ref_property')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('ref_property')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('pure_const')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.pure ('pure')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('pure_sharedconst')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.pure ('pure')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_const')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_const')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_sharedconst')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('shared_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_sharedconst')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('shared_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('safeDel')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('safeDel')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('trustedDel')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('trustedDel')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('systemDel')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('systemDel')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
WHITE_SPACE (' ')
DLangTokenType.ID ('extractAttribFlags')
DLangTokenType.( ('(')
DLangTokenType.ID ('Attribs')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrib')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attribs')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.switch ('switch')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrib')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.with ('with')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"pure"')
DLangTokenType.: (':')
WHITE_SPACE ('      ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('pure_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"nothrow"')
DLangTokenType.: (':')
WHITE_SPACE ('   ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('nothrow_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"ref"')
DLangTokenType.: (':')
WHITE_SPACE ('       ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ref_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"@property"')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"@trusted"')
DLangTokenType.: (':')
WHITE_SPACE ('  ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('trusted')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"@safe"')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('safe')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"@nogc"')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('nogc')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"@system"')
DLangTokenType.: (':')
WHITE_SPACE ('   ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('system')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"const"')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('const_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"immutable"')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('immutable_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"inout"')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('inout_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"shared"')
DLangTokenType.: (':')
WHITE_SPACE ('    ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('shared_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"return"')
DLangTokenType.: (':')
WHITE_SPACE ('    ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.|= ('|=')
WHITE_SPACE (' ')
DLangTokenType.ID ('return_')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.default ('default')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrib')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('res')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D true) if $(D func) is $(D @safe) or $(D @trusted).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('                  ')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('add')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.+ ('+')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('sub')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.- ('-')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE ('  ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('mul')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.* ('*')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('add')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('sub')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.ID ('mul')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Member functions')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Set')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Set')
DLangTokenType.. ('.')
DLangTokenType.ID ('safeF')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Set')
DLangTokenType.. ('.')
DLangTokenType.ID ('trustedF')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Set')
DLangTokenType.. ('.')
DLangTokenType.ID ('systemF')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Functions')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeFunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedFunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemFunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('safeFunc')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('trustedFunc')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.ID ('systemFunc')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Delegates')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('safeDel')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('trustedDel')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.ID ('systemDel')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Lambdas')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
DLangTokenType.ID ('safeDel')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
DLangTokenType.ID ('trustedDel')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
DLangTokenType.ID ('systemDel')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Static opCall')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SafeStatic')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('SafeStatic')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('SafeStatic')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('TrustedStatic')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('TrustedStatic')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('TrustedStatic')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SystemStatic')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('SystemStatic')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('SystemStatic')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SafeStatic')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TrustedStatic')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SystemStatic')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Non-static opCall')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Safe')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.ID ('Safe')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('Safe')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Trusted')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.ID ('Trusted')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('Trusted')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('System')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.ID ('System')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('System')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Safe')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Trusted')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('System')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D true) if $(D func) is $(D @system).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Safe')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('add')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.+ ('+')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('sub')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.- ('-')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE ('  ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('mul')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.* ('*')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('add')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('sub')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('mul')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Member functions')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Set')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeF')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Set')
DLangTokenType.. ('.')
DLangTokenType.ID ('safeF')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Set')
DLangTokenType.. ('.')
DLangTokenType.ID ('trustedF')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Set')
DLangTokenType.. ('.')
DLangTokenType.ID ('systemF')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Functions')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeFunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedFunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemFunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('safeFunc')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('trustedFunc')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('systemFunc')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Delegates')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('safeDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('trustedDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('systemDel')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('safeDel')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('trustedDel')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.! ('!')
DLangTokenType.ID ('systemDel')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Lambdas')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
DLangTokenType.ID ('safeDel')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
DLangTokenType.ID ('trustedDel')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
DLangTokenType.ID ('systemDel')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Static opCall')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SafeStatic')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('SafeStatic')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('SafeStatic')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('TrustedStatic')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('TrustedStatic')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('TrustedStatic')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SystemStatic')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('SystemStatic')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('SystemStatic')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SafeStatic')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TrustedStatic')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SystemStatic')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Non-static opCall')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Safe')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.ID ('Safe')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('Safe')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Trusted')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DLangTokenType.ID ('Trusted')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('Trusted')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('System')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.ID ('System')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('System')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Safe')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Trusted')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsafe')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('System')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the calling convention of function as a string.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Func')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.[ ('[')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''F'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''U'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''W'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Windows"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''V'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pascal"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.CHARACTER_LITERAL (''R'')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C++"')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('Func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('D')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('Dfunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('Cfunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('Dfunc')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('Cfunc')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('Dfunc')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('fp')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
DLangTokenType.ID ('Cfunc')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('fp')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('const_func')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('sharedconst_func')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_func')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('sharedconst_func')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Determines what kind of variadic parameters function has.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('no')
DLangTokenType., (',')
WHITE_SPACE ('       ')
DLangTokenType.line_comment ('/// Function is not variadic.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('/// Function is a _C-style variadic function.')
WHITE_SPACE ('\n')
WHITE_SPACE ('              ')
DLangTokenType.line_comment ('/// Function is a _D-style variadic function, which uses')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('/// __argptr and __arguments.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('typesafe')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('/// Function is a typesafe variadic function.')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Func')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// TypeFuncion --> CallConvention FuncAttrs Arguments ArgClose Type')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('callconv')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('Func')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('mfunc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('Func')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('mtype')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Func')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mfunc')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.ID ('mtype')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('mtype')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('mfunc')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"|"')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('mtype')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('argclose')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('mfunc')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.ID ('mtype')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('argclose')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''X'')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('argclose')
WHITE_SPACE (' ')
DLangTokenType.<= ('<=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''Z'')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFunctionStyle')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('argclose')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''X'')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('typesafe')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('argclose')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''Y'')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('callconv')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('d')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('no')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// 'Z'')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('no')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('printf')
DLangTokenType.( ('(')
DLangTokenType.in ('in')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('printf')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('core')
DLangTokenType.. ('.')
DLangTokenType.ID ('vararg')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('D')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('novar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('cstyle')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('D')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('dstyle')
DLangTokenType.( ('(')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('D')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('typesafe')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('novar')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('no')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('cstyle')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('dstyle')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('d')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('typesafe')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('typesafe')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('typesafe')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Get the function type from a callable object $(D func).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Using builtin $(D typeof) on a property function yields the types of the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('property value, not of the property function itself.  Still,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D FunctionTypeOf) is able to obtain function types of properties.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Note:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Do not confuse function types with function pointer types; function types are')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('usually used for compile-time reflection purposes.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fsym')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fsym')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Fsym')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fsym')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fsym')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// HIT: (nested) function symbol')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('opCall')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fobj')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fobj')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// HIT: callable object')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('opCall')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ftyp')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ftyp')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Ftyp')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ftyp')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// HIT: callable type')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// HIT: function')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fptr')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fptr')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Fptr')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fptr')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// HIT: function pointer')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fdlg')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fdlg')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// HIT: delegate')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('propGet')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('propSet')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('test_fp')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('test_dg')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('test')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('test_fp')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('test_dg')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('GetterType')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetterType')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('propGet')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('GetterType')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('propSet')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetterType')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Prop')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('Prop')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Prop')
DLangTokenType.. ('.')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('GetterType')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('prop')
DLangTokenType.. ('.')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('GetterType')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Callable')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('call')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.new ('new')
WHITE_SPACE (' ')
DLangTokenType.ID ('Callable')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('call')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticCallable')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('StaticCallable')
WHITE_SPACE (' ')
DLangTokenType.ID ('stcall_val')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('StaticCallable')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('stcall_ptr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('stcall_val')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('stcall_ptr')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Overloads')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE ('  ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE ('  ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ov')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getVirtualFunctions')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Overloads')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"test"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('F_ov0')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ov')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('F_ov1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ov')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('F_ov2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ov')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('F_ov3')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ov')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F_ov0')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F_ov1')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F_ov2')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F_ov3')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('F_dglit')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F_dglit')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Constructs a new function or delegate type with the same basic signature')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' as the given one, but different attributes (including linkage).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' This is especially useful for adding')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('removing attributes to')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('from types in')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' generic code, where the actual type name cannot be spelt out.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Params:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('    T = The base type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('    linkage = The desired linkage of the result type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('    attrs = The desired $(LREF FunctionAttribute)s of the result type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.mixin ('mixin')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('algorithm')
DLangTokenType.. ('.')
DLangTokenType.ID ('searching')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('canFind')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Cannot have a function/delegate that is both trusted and safe."')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkages')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Windows"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pascal"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C++"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"System"')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('canFind')
DLangTokenType.( ('(')
DLangTokenType.ID ('linkages')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Invalid linkage '"')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('linkage')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"', must be one of "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkages')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"."')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alias "')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('linkage')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"extern("')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('") "')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"ref "')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"ReturnType!T"')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" delegate"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" function"')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"("')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.> ('>')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Parameters!T"')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('varStyle')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('varStyle')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('", ..."')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('varStyle')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('d')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"..."')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('varStyle')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('typesafe')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"..."')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('")"')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" pure"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" nothrow"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @property"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @trusted"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @safe"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('nogc')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @nogc"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" @system"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" const"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('immutable_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" immutable"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('inout_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" inout"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('shared_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" shared"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" return"')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" SetFunctionAttributes;"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// Ditto')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// To avoid a lot of syntactic headaches, we just use the above version to')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// operate on the corresponding function pointer type and then remove the')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// indirection again.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ExternC')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('assumePure')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.cast ('cast')
DLangTokenType.( ('(')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.version ('version')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.unittest ('unittest')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Some function types to test.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('sc')
DLangTokenType.( ('(')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.out ('out')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.lazy ('lazy')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('System')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('novar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('cstyle')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('D')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('dstyle')
DLangTokenType.( ('(')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.extern ('extern')
DLangTokenType.( ('(')
DLangTokenType.ID ('D')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('typesafe')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('algorithm')
DLangTokenType.. ('.')
DLangTokenType.ID ('iteration')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('reduce')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseT')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('sc')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('novar')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('cstyle')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('dstyle')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('typesafe')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseT')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('BaseT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// avoid slow optimizations for large functions @@@BUG@@@ 2396')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('linkage')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Identity check failed for: "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// Check that all linkage types work (D-style variadics require D linkage).')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Variadic')
DLangTokenType.. ('.')
DLangTokenType.ID ('d')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('newLinkage')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"D"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Windows"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pascal"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C++"')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('New')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('newLinkage')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attrs')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('New')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('newLinkage')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Linkage test failed for: "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('", "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('newLinkage')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" (got "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('New')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('")"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// Add @safe.')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('T1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// Add all known attributes, excluding conflicting ones.')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('allAttrs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('reduce')
DLangTokenType.! ('!')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a | b"')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('FA')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('const_')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('immutable_')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('inout_')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('shared_')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('allAttrs')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('T2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('allAttrs')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// Strip all attributes again.')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T3')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('SetFunctionAttributes')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T3')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// Aggregate Types')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Determines whether `T` is a class nested inside another class')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('and that `T.outer` is the implicit reference to the outer class')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('(i.e. `outer` has not been used as a field or method name)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Params:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    T = type to test')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('`true` if `T` is a class nested inside another, with the conditions described above;')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('`false` otherwise')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isInnerClass')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('outer')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isInnerClass')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('outer')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                         ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('allMembers')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"outer"')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isInnerClass')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('outer')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InnerClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Outer1')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner2')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('outer')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isInnerClass')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Outer1')
DLangTokenType.. ('.')
DLangTokenType.ID ('Inner1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InnerClass')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Outer1')
DLangTokenType.. ('.')
DLangTokenType.ID ('Inner2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Outer2')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('outer')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InnerClass')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Outer2')
DLangTokenType.. ('.')
DLangTokenType.ID ('Inner')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Determines whether $(D T) has its own context pointer.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D T) must be either $(D class), $(D struct), or $(D union).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNested')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Nested')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Determines whether $(D T) or any of its representation types')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('have a context pointer.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.. ('.')
DLangTokenType.ID ('hasNested')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fields')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('NS')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NS')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticStruct')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Nested')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticStruct')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticStruct')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
WHITE_SPACE (' ')
DLangTokenType.ID ('nested')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Nested')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
WHITE_SPACE (' ')
DLangTokenType.ID ('nested')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Nested')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('nested')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Nested')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct')
WHITE_SPACE (' ')
DLangTokenType.ID ('nested')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Nested')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticClass')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Nested')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticClass')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticClass')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedClass')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedClass')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedClass')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedClass')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedClass')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NestedClass')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NestedClass')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasNested')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NestedClass')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get as a tuple the types of the fields of a struct, class, or union.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' This consists of the fields that take up memory space,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' excluding the hidden fields like the virtual function')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' table pointer or a context pointer for nested types.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' If $(D T) isn't a struct, class, or union returns a tuple')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' with one element $(D T).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fields')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fields')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fields')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fields')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Fields')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Alternate name for $(LREF Fields), kept for legacy compatibility.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Fields')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticStruct1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticStruct1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticStruct2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticStruct2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedStruct1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedStruct2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedClass')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedClass')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('//Required for FieldNameTuple')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('NameOf')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get as an expression tuple the names of the fields of a struct, class, or')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' union. This consists of the fields that take up memory space, excluding the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' hidden fields like the virtual function table pointer or a context pointer')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' for nested types. If $(D T) isn't a struct, class, or union returns an')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' expression tuple with an empty string.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticMap')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldNameTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticMap')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NameOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNested')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldNameTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticMap')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NameOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldNameTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"x"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"y"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.DOUBLE_QUOTED_STRING ('""')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticStruct1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticStruct1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticStruct2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('StaticStruct2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"b"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedStruct1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedStruct2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedStruct2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('NestedClass')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldNameTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('NestedClass')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Get the primitive types of the fields of a struct or class, in')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('topological order.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typecons')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('R')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.ID ('R')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.ID ('R')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('  ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('// @@@BUG@@@ this should work')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('//alias .RepresentationTypes!(T[0].tupleof)')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('//    RepresentationTypes;')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('R')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('4')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S21')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('R')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S21')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('4')
WHITE_SPACE ('\n')
WHITE_SPACE ('           ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('           ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('R1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('R1')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R1')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R1')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment (' Issue 6642 ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typecons')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('R2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('R2')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R2')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('R2')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Statically evaluates to $(D true) if and only if $(D T)'s')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('representation contains at least one field of pointer or array type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Members of class types are not considered raw pointers. Pointers to')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('immutable objects are not considered raw aliasing.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// simple types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// references aren't raw pointers')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// built-in arrays do contain raw pointers')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// aggregate of simple types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// indirect aggregation')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// struct with a pointer member')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// struct with an indirect pointer member')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('z')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S8')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S12')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S8')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S13')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S8')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S12')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S13')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// indirect members')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S10')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S11')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Statically evaluates to $(D true) if and only if $(D T)'s')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('representation contains at least one non-shared field of pointer or')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('array type.  Members of class types are not considered raw pointers.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Pointers to immutable objects are not considered raw aliasing.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('has')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// simple types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// references aren't raw pointers')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// built-in arrays do contain raw pointers')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// aggregate of simple types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// indirect aggregation')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// struct with a pointer member')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// struct with a pointer member')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// struct with an indirect pointer member')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('z')
DLangTokenType.; (';')
WHITE_SPACE ('      ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S8')
WHITE_SPACE ('  ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE ('  ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S10')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('S13')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S13')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// indirect members')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S14')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE ('  ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S15')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S10')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S16')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE ('  ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S14')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S15')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S16')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S17')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('d')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('e')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('g')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('h')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('j')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('k')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('l')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('m')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('o')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S18')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S19')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S20')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S21')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S22')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S23')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S24')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S17')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S17')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S18')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S18')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S18')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S19')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S19')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S19')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S20')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S20')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S20')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S21')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S21')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S21')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S22')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S22')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S22')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S23')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S23')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S23')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S24')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S24')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S24')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S25')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S26')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('S27')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S28')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S25')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S26')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S27')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S28')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Statically evaluates to $(D true) if and only if $(D T)'s')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('representation includes at least one non-immutable object reference.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasObjects')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasObjects')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasObjects')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasObjects')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasObjects')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.interface ('interface')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasObjects')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Statically evaluates to $(D true) if and only if $(D T)'s')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('representation includes at least one non-immutable non-shared object')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('reference.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedObjects')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedObjects')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedObjects')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedObjects')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedObjects')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.interface ('interface')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('hasUnsharedObjects')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns $(D true) if and only if $(D T)'s representation includes at')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('least one of the following: $(OL $(LI a raw pointer $(D U')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (') and $(D U)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('is not immutable;) $(LI an array $(D U[]) and $(D U) is not')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('immutable;) $(LI a reference to a class or interface type $(D C) and $(D C) is')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('not immutable.) $(LI an associative array that is not immutable.)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(LI a delegate.))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typecons')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.ID ('R')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('R')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAliasingDelegate')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAliasingDelegate')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                  ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                  ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasRawAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasObjects')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAliasingDelegate')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('vals')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.uint ('uint')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.uint ('uint')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typecons')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('j')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S5')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S8')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S8')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S10')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S8')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S12')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('S13')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S14')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S11')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S12')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S13')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S14')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns $(D true) if and only if $(D T)'s representation includes at')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('least one of the following: $(OL $(LI a raw pointer $(D U')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (');) $(LI an')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('array $(D U[]);) $(LI a reference to a class type $(D C).)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(LI an associative array.) $(LI a delegate.))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.. ('.')
DLangTokenType.ID ('hasIndirections')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.[ ('[')
DLangTokenType.ID ('N')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('N')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('E')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('E')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('isAssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.interface ('interface')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.* ('*')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.byte ('byte')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// void static array hides actual type of bits, so "may have indirections".')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S8')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S10')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S12')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S13')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S14')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S15')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S16')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S17')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S18')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S19')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S20')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S21')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S22')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S23')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S24')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S25')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S26')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S12')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S13')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S14')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S15')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S16')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S17')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S18')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S19')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S20')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S21')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S22')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S23')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S24')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S25')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('S26')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('//12000')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasIndirections')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('S')
DLangTokenType.! ('!')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('A')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('dummy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns $(D true) if and only if $(D T)'s representation includes at')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('least one of the following: $(OL $(LI a raw pointer $(D U')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (') and $(D U)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('is not immutable or shared;) $(LI an array $(D U[]) and $(D U) is not')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('immutable or shared;) $(LI a reference to a class type $(D C) and')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D C) is not immutable or shared.) $(LI an associative array that is not')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('immutable or shared.) $(LI a delegate that is not shared.))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typecons')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('R')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.ID ('R')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('R')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('unsharedDelegate')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('unsharedDelegate')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                     ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                     ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                     ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                     ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                     ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('hasRawUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('unsharedDelegate')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('RepresentationTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('hasUnsharedObjects')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType... ('..')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('vals')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment (' Issue 6642 ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typecons')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S8')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.uint ('uint')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('typecons')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment (' Issue 6979 ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rebindable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('d')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('e')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('g')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('h')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('j')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('k')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('l')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('m')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('o')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S10')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S11')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S12')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S13')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S14')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S15')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S16')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
WHITE_SPACE (' ')
DLangTokenType.ID ('p')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S11')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S11')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S11')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S12')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S12')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S12')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S13')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S13')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S13')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S14')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S14')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S14')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S15')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S15')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S15')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S16')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S16')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.ID ('S16')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S17')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('S18')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('S19')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('S20')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S17')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S18')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S19')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUnsharedAliasing')
DLangTokenType.! ('!')
DLangTokenType.ID ('S20')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' True if $(D S) or any type embedded directly in the representation of $(D S)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' defines an elaborate copy constructor. Elaborate copy constructors are')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' introduced by defining $(D this(this)) for a $(D struct).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' Classes and unions never have elaborate copy constructors.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"__postblit"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.. ('.')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateCopyConstructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   True if $(D S) or any type directly embedded in the representation of $(D S)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   defines an elaborate assignment. Elaborate assignments are introduced by')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   defining $(D opAssign(typeof(this))) or $(D opAssign(ref typeof(this)))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   for a $(D struct) or when there is a compiler-generated $(D opAssign).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   A type $(D S) gets compiler-generated $(D opAssign) in case it has')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   an elaborate copy constructor or elaborate destructor.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   Classes and unions never have elaborate assignments.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   Note: Structs with (possibly nested) postblit operator(s) will have a')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   hidden yet elaborate compiler generated assignment operator (unless')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   explicitly disabled).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.. ('.')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('rvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                  ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.. ('.')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.. ('.')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE ('  ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE ('  ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.ID ('u')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.ID ('u')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S41')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.ID ('u')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.ID ('u')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S41')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S8')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('S8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('                             ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S10')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S9')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('S10')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SS6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SS7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SS8')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S8')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SS9')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S9')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('SS6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('SS7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('SS8')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateAssign')
DLangTokenType.! ('!')
DLangTokenType.ID ('SS9')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   True if $(D S) or any type directly embedded in the representation')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   of $(D S) defines an elaborate destructor. Elaborate destructors')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   are introduced by defining $(D ~this()) for a $(D')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   struct).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   Classes and unions never have elaborate destructors, even')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   though classes may define $(D ~this()).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"__dtor"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('anySatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.. ('.')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S7')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.ID ('field')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasElaborateDestructor')
DLangTokenType.! ('!')
DLangTokenType.ID ('S7')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.package ('package')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Identity')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   Yields $(D true) if and only if $(D T) is an aggregate that defines')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   a symbol called $(D name).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasMember')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"blah"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('blah')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('blah')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('blah')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('blah')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"blah"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"blah"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"blah"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"blah"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// 8321')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('R1')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('R2')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('payload')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('t')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"x"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"f"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"t"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"T"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R1')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"x"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R1')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"f"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R1')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"t"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R1')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"T"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R2')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"x"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R2')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"f"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R2')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"t"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('R2')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"T"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opDispatch')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.ID ('dummy')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"foo"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Retrieves the members of an enumerated type $(D enum E).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Params:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' E = An enumerated type. $(D E) may have duplicated values.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' Static tuple composed of the members of the enumerated type $(D E).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' The members are arranged in the same order as declared in $(D E).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Note:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' An enum can have multiple members which have the same value. If you want')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' to use EnumMembers to e.g. generate switch cases at compile-time,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' you should use the $(REF NoDuplicates, std,typetuple) template to avoid')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' generating duplicate switch cases.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Note:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' Returned values are strictly typed with $(D E). Thus, the following code')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' does not work without the explicit cast:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('enum E : int { a, b, c }')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('int[] abc = cast(int[]) [ EnumMembers!E ];')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' Cast is not necessary if the type of the variable is inferred. See the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' example below.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Example:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' Creating an array of enumerated values:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('enum Sqrts : real')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('{')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    one   = 1,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    two   = 1.41421,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    three = 1.73205,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('}')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('auto sqrts = [ EnumMembers!Sqrts ];')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('assert(sqrts == [ Sqrts.one, Sqrts.two, Sqrts.three ]);')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' A generic function $(D rank(v)) in the following example uses this')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' template for finding a member $(D e) in an enumerated type $(D E).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment (' Returns i if e is the i-th enumerator of E.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('size_t rank(E)(E e)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    if (is(E == enum))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('{')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    foreach (i, member; EnumMembers!E)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    {')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('        if (e == member)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('            return i;')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    }')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    assert(0, "Not an enum member");')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('}')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('enum Mode')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('{')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    read  = 1,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    write = 2,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    map   = 4,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('}')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('assert(rank(Mode.read ) == 0);')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('assert(rank(Mode.write) == 1);')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('assert(rank(Mode.map  ) == 2);')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.( ('(')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('E')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Supply the specified identifier to an constant value.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('WithIdentifier')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('ident')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('ident')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Symbolize"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Symbolize')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Symbolize')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.mixin ('mixin')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"template Symbolize(alias "')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('ident')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('")"')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('"{"')
WHITE_SPACE ('\n')
WHITE_SPACE ('                     ')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alias Symbolize = "')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('ident')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('";"')
WHITE_SPACE ('\n')
WHITE_SPACE ('                 ')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('"}"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumSpecificMembers')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumSpecificMembers')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('WithIdentifier')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.. ('.')
DLangTokenType.ID ('Symbolize')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('names')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.> ('>')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumSpecificMembers')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('WithIdentifier')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.. ('.')
DLangTokenType.ID ('Symbolize')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('names')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('EnumSpecificMembers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('EnumSpecificMembers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType... ('..')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumSpecificMembers')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumSpecificMembers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('allMembers')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('e')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('e')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// typed enums')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"beta"')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCmp')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.ID ('rhs')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.nothrow ('nothrow')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.ID ('rhs')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// duplicated values')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('d')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('e')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.. ('.')
DLangTokenType.ID ('e')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// Bugzilla 14561: huge enums')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('genEnum')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"enum TLAs {"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('c0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''0'')
DLangTokenType... ('..')
DLangTokenType.CHARACTER_LITERAL (''2'')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('c1')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''0'')
DLangTokenType... ('..')
DLangTokenType.CHARACTER_LITERAL (''9'')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('c2')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''0'')
DLangTokenType... ('..')
DLangTokenType.CHARACTER_LITERAL (''9'')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('c3')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''0'')
DLangTokenType... ('..')
DLangTokenType.CHARACTER_LITERAL (''9'')
DLangTokenType.+ ('+')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''_'')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.ID ('c0')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.ID ('c1')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.ID ('c2')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.ID ('c3')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL ('','')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('result')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''}'')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('result')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.mixin ('mixin')
DLangTokenType.( ('(')
DLangTokenType.ID ('genEnum')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('TLAs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TLAs')
DLangTokenType.FLOAT_LITERAL ('._0000')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('TLAs')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TLAs')
DLangTokenType.FLOAT_LITERAL ('._2999')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('member')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('identifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('E')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"member"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('identifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('E')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('identifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('EnumMembers')
DLangTokenType.! ('!')
DLangTokenType.ID ('E')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"b"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// Classes and Interfaces')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get a $(D_PARAM TypeTuple) of the base class and base interfaces of')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' this class or interface. $(D_PARAM BaseTypeTuple!Object) returns')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' the empty type tuple.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.ID ('P')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.super ('super')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('P')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"argument is not a class or interface"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I12')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('I12')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('I1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I3')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I123')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('I123')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('I1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I3')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TL')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get a $(D_PARAM TypeTuple) of $(I all) base classes of this class,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' in decreasing order. Interfaces are not included. $(D_PARAM')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' BaseClassesTuple!Object) yields the empty type tuple.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseClassesTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseClassesTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseClassesTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C2')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('C1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C3')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('C2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C3')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('C1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C4')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C5')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('C4')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C5')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C4')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get a $(D_PARAM TypeTuple) of $(I all) interfaces directly or')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' indirectly inherited by this class or interface. Interfaces do not')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' repeat if multiply implemented. $(D_PARAM InterfacesTuple!Object)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' yields the empty type tuple.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('InterfacesTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('NoDuplicates')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Flatten')
DLangTokenType.( ('(')
DLangTokenType.ID ('H')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Flatten')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Flatten')
DLangTokenType.! ('!')
DLangTokenType.ID ('H')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Flatten')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('H')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.interface ('interface')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Flatten')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('H')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InterfacesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('H')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Flatten')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('InterfacesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('H')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.super ('super')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('InterfacesTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('NoDuplicates')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Flatten')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('InterfacesTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// doc example')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TL')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('InterfacesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('I1')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('I2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iaa')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iab')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iba')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ibb')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ia')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iaa')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iab')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ib')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iba')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ibb')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ia')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ib')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B2')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C2')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('B2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ia')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ib')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('InterfacesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Ia')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iaa')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iab')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ib')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iba')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ibb')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('InterfacesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('J')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ia')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iaa')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iab')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ib')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Iba')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Ibb')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get a $(D_PARAM TypeTuple) of $(I all) base classes of $(D_PARAM')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' T), in decreasing order, followed by $(D_PARAM T)'s')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' interfaces. $(D_PARAM TransitiveBaseTypeTuple!Object) yields the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' empty type tuple.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('TransitiveBaseTypeTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TransitiveBaseTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TransitiveBaseTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseClassesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InterfacesTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('J1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('J2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B2')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('B1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('J1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('J2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B3')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('B2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('J1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TL')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TransitiveBaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('B3')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('B2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('B1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('J1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('TL')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('J2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('TransitiveBaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('Object')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns a tuple of non-static functions with the name $(D name) declared in the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('class or interface $(D C).  Covariant duplicates are shrunk into the most')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('derived one.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.interface ('interface')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' First, collect all overloads in the class hierarchy.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('CollectOverloads')
DLangTokenType.( ('(')
DLangTokenType.ID ('Node')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Node')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Node')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('// Get all overloads in sight (not hidden).')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('inSight')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getVirtualFunctions')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Node')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('// And collect all overloads in ancestor classes to reveal hidden')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('// methods.  The result may contain duplicates.')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('walkThru')
DLangTokenType.( ('(')
DLangTokenType.ID ('Parents')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Parents')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.> ('>')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('walkThru')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                    ')
DLangTokenType.ID ('CollectOverloads')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Parents')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                    ')
DLangTokenType.ID ('walkThru')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Parents')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('walkThru')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Node')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parents')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.super ('super')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CollectOverloads')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('inSight')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('walkThru')
DLangTokenType.! ('!')
DLangTokenType.ID ('Parents')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CollectOverloads')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('inSight')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CollectOverloads')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// no overloads in this hierarchy')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// duplicates in this tuple will be removed by shrink()')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('overloads')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('CollectOverloads')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// shrinkOne!args[0]    = the most derived one in the covariant siblings of target')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// shrinkOne!args[1..$] = non-covariant others')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
DLangTokenType.( ('(')
DLangTokenType.NESTING_BLOCK_COMMENT ('/+')
DLangTokenType.NESTING_BLOCK_COMMENT (' alias target, rest... ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+/')
WHITE_SPACE (' ')
DLangTokenType.ID ('args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('target')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('args')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// prevent property functions from being evaluated')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('args')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('rest')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.> ('>')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Target')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('target')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rest0')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Target')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rest0')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rest0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Target')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.line_comment ('// One of these overrides the other. Choose the one from the most derived parent.')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('target')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('parent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('target')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Target')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rest0')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.line_comment ('// target overrides rest[0] -- erase rest[0].')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('target')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Rest0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Target')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.line_comment ('// rest[0] overrides target -- erase target.')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.line_comment ('// target and rest[0] are distinct.')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                ')
DLangTokenType.ID ('shrinkOne')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('target')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                ')
DLangTokenType.ID ('rest')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// keep')
WHITE_SPACE ('\n')
WHITE_SPACE ('                            ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('target')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// done')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Now shrink covariant overloads into one.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrink')
DLangTokenType.( ('(')
DLangTokenType.ID ('overloads')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('overloads')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.> ('>')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('temp')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrinkOne')
DLangTokenType.! ('!')
DLangTokenType.ID ('overloads')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrink')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('temp')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrink')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('temp')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrink')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// done')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// done.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('shrink')
DLangTokenType.! ('!')
DLangTokenType.ID ('overloads')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('v')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('v')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// covariant overriding of I.foo()')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('foos')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"foo"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('foos')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('foos')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('foos')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.. ('.')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// Issue 15920')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('fs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('B')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"f"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('bfs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getOverloads')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"f"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('bfs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('bfs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('bfs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('bfs')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE ('     ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('K')
WHITE_SPACE ('     ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('K')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('K')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('K')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
DLangTokenType.ID ('MemberFunctionsTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"test"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('test')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('K')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('noexist')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"noexist"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('noexist')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('L')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('L')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"prop"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('prop')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test_I')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test_I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test_foo')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('MemberFunctionsTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"foo"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test_foo')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('Test_foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('Test_foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('Test_foo')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns an alias to the template that $(D T) is an instance of.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType.! ('!')
DLangTokenType.ID ('Args')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType.! ('!')
DLangTokenType.ID ('Args')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo1')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo2')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo3')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo4')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo5')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo6')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo7')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo8')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo9')
DLangTokenType.( ('(')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo10')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo1')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo2')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo3')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('123')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo3')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo4')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"123"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo4')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo5')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo5')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo6')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo6')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo7')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('123')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo7')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo8')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('Foo9')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo8')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('Foo9')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo10')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo10')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns a $(D TypeTuple) of the template arguments used to instantiate $(D T).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType.! ('!')
DLangTokenType.ID ('Args')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateArgsOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType.! ('!')
DLangTokenType.ID ('Args')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Base')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateArgsOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo1')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo2')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo3')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo4')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo5')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo6')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo7')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo8')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo9')
DLangTokenType.( ('(')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo10')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('123')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"123"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo1')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo2')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo3')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo4')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('y')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo5')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo6')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo7')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo8')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('Foo9')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('TemplateArgsOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo10')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('maxAlignment')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticMap')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('maxAlignment')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('alignof')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('algorithm')
DLangTokenType.. ('.')
DLangTokenType.ID ('comparison')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('max')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('maxAlignment')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('max')
DLangTokenType.( ('(')
DLangTokenType.ID ('staticMap')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.. ('.')
DLangTokenType.ID ('maxAlignment')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns class instance alignment.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('classInstanceAlignment')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('classInstanceAlignment')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('maxAlignment')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.ID ('l')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// As class instance always has a hidden pointer')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('classInstanceAlignment')
DLangTokenType.! ('!')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('alignof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('classInstanceAlignment')
DLangTokenType.! ('!')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.. ('.')
DLangTokenType.ID ('alignof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// Type Conversion')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Get the type that all types can be implicitly converted to. Useful')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('e.g. in figuring out an array type from a bunch of initializing')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('values. Returns $(D_PARAM void) if passed an empty list, or if the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('types have no common type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.true ('true')
WHITE_SPACE (' ')
DLangTokenType.? ('?')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Y')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('CommonType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Y')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CommonType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CommonType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CommonType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CommonType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns a tuple with all possible target types of an implicit')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' conversion of a value of type $(D_PARAM T).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Important note:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' The possible targets are computed more conservatively than the D')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' 2.005 compiler does, eliminating all dangerous conversions. For')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' example, $(D_PARAM ImplicitConversionTargets!double) does not')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' include $(D_PARAM float).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.byte ('byte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('cent')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('cent')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.real ('real')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.wchar ('wchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.dchar ('dchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                       ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CentTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TransitiveBaseTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImplicitConversionTargets')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ImplicitConversionTargets')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ImplicitConversionTargets')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Is $(D From) implicitly convertible to $(D To)?')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isImplicitlyConvertible')
DLangTokenType.( ('(')
DLangTokenType.ID ('From')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('To')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isImplicitlyConvertible')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('fun')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('From')
WHITE_SPACE (' ')
DLangTokenType.ID ('v')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('gun')
DLangTokenType.( ('(')
DLangTokenType.ID ('To')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('gun')
DLangTokenType.( ('(')
DLangTokenType.ID ('v')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.wchar ('wchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ushort ('ushort')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ulong ('ulong')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns $(D true) iff a value of type $(D Rhs) can be assigned to a variable of')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('type $(D Lhs).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D isAssignable) returns whether both an lvalue and rvalue can be assigned.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('If you omit $(D Rhs), $(D isAssignable) will check identity assignable of $(D Lhs).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.( ('(')
DLangTokenType.ID ('Lhs')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rhs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Lhs')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isRvalueAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Lhs')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rhs')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isLvalueAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Lhs')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rhs')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.long ('long')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// int is assignable to int')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// immutable int is not assignable to immutable int')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// ditto')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isRvalueAssignable')
DLangTokenType.( ('(')
DLangTokenType.ID ('Lhs')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rhs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Lhs')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lhs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('rvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('Rhs')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// ditto')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isLvalueAssignable')
DLangTokenType.( ('(')
DLangTokenType.ID ('Lhs')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Rhs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Lhs')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lhs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('Rhs')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3X')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3X')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3X')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S4')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S4')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S4')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S6')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('opAssign')
DLangTokenType.( ('(')
DLangTokenType.in ('in')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Assignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S6')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('RvalueAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S6')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isLvalueAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S6')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isLvalueAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S6')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('S5')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('// Equivalent with TypeStruct::isAssignable in compiler code.')
WHITE_SPACE ('\n')
DLangTokenType.package ('package')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.[ ('[')
DLangTokenType.ID ('n')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Workaround for issue 11499 : isStaticArray!T should not be necessary.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.ID ('E')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isMutable')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('offset')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('assignable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('FieldTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('offsetof')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('offset')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('assignable')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                            ')
DLangTokenType.continue ('continue')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('assignable')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('assignable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('offset')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('tupleof')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('offsetof')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('assignable')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isMutable')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3X')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Y')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Z')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3Y')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3Z')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ES3X')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3X')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3X')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ES3Y')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Y')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Y')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ES3Z')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Z')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3Z')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ES3X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ES3Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ES3Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('ES3X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('ES3Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('ES3Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ES3X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ES3Y')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ES3Z')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1X')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Y')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Z')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('U1X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('U1Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('U1Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('U1X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('U1Y')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('U1Z')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EU1X')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1X')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1X')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EU1Y')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Y')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Y')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EU1Z')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Z')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1Z')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('EU1X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('EU1Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('EU1Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('EU1X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('EU1Y')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('EU1Z')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('EU1X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('EU1Y')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('EU1Z')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SA')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType., (',')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// SA is not blit assignable')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('SA')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BlitAssignable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SA')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Works like $(D isImplicitlyConvertible), except this cares only about storage')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('classes of the arguments.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStorageClassImplicitlyConvertible')
DLangTokenType.( ('(')
DLangTokenType.ID ('From')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('To')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Pointify')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.* ('*')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStorageClassImplicitlyConvertible')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Pointify')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('From')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Pointify')
DLangTokenType., (',')
WHITE_SPACE ('   ')
DLangTokenType.ID ('To')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStorageClassImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('          ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStorageClassImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StorageClassImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE ('           ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StorageClassImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StorageClassImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StorageClassImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Determines whether the function type $(D F) is covariant with $(D G), i.e.,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('functions of the type $(D F) can override ones of the type $(D G).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('G')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('G')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('G')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Upr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Lwr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('G')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check for calling convention: require exact match.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkLinkage')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('Upr')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionLinkage')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lwr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check for variadic parameter: require exact match.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkVariadicity')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('Upr')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('variadicFunctionStyle')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lwr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check for function storage class:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  - overrider can have narrower storage class than base')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkSTC')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// Note the order of arguments.  The convertion order Lwr -> Upr is')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// correct since Upr should be semantically 'narrower' than Lwr.')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStorageClassImplicitlyConvertible')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Lwr')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Upr')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check for function attributes:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  - require exact match for ref and @property')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  - overrider can add pure and nothrow, but can't remove them')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  - @safe and @trusted are covariant with each other, unremovable')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkAttributes')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FunctionAttribute')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('uprAtts')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('Upr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('lwrAtts')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('functionAttributes')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lwr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('//')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('wantExact')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('safety')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('trusted')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.( ('(')
WHITE_SPACE ('  ')
DLangTokenType.( ('(')
DLangTokenType.ID ('uprAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('wantExact')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('lwrAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('wantExact')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.( ('(')
WHITE_SPACE ('  ')
DLangTokenType.( ('(')
DLangTokenType.ID ('uprAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE ('   ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('lwrAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('pure_')
WHITE_SPACE ('   ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.( ('(')
WHITE_SPACE ('  ')
DLangTokenType.( ('(')
DLangTokenType.ID ('uprAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('lwrAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('FA')
DLangTokenType.. ('.')
DLangTokenType.ID ('nothrow_')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('uprAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('safety')
WHITE_SPACE ('    ')
DLangTokenType.) (')')
WHITE_SPACE ('  ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('lwrAtts')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('safety')
WHITE_SPACE ('    ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check for return type: usual implicit convertion.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkReturnType')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Upr')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lwr')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check for parameters:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  - require exact match for types (cf. bugzilla 3075)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  - require exact match for in, out, ref and lazy')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  - overrider can add scope, but can't remove')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkParameters')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClass')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UprParams')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.ID ('Upr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('LwrParams')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Parameters')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lwr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UprPSTCs')
WHITE_SPACE ('  ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('Upr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('LwrPSTCs')
WHITE_SPACE ('  ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ParameterStorageClassTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('Lwr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('//')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkNext')
DLangTokenType.( ('(')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.< ('<')
WHITE_SPACE (' ')
DLangTokenType.ID ('UprParams')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('uprStc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('UprPSTCs')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('lwrStc')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('LwrPSTCs')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.line_comment ('//')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('wantExact')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('out_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('ref_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('lazy_')
WHITE_SPACE (' ')
DLangTokenType.| ('|')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('return_')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.ID ('uprStc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('wantExact')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE ('  ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('lwrStc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('wantExact')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.ID ('uprStc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('scope_')
DLangTokenType.) (')')
WHITE_SPACE ('  ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('lwrStc')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('STC')
DLangTokenType.. ('.')
DLangTokenType.ID ('scope_')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.ID ('checkNext')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType.+ ('+')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// done')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('UprParams')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('LwrParams')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('UprParams')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('LwrParams')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('checkNext')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment (' run all the checks ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('checkLinkage')
WHITE_SPACE ('    ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('checkVariadicity')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('checkSTC')
WHITE_SPACE ('        ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('checkAttributes')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('checkReturnType')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('checkParameters')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('ok')
WHITE_SPACE (' ')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.ID ('clone')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE (' ')
DLangTokenType.ID ('clone')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.ID ('clone')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.line_comment ('// covariant overriding of I.clone()')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.new ('new')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// C.clone() can override I.clone(), indeed.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('clone')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('I')
DLangTokenType.. ('.')
DLangTokenType.ID ('clone')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// C.clone() can't override J.clone(); the return type C is not implicitly')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// convertible to J.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('clone')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('J')
DLangTokenType.. ('.')
DLangTokenType.ID ('clone')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('g')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.. ('.')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// covariant return type')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE ('     ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('J')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseA')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('          ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivA_1')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseA')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('J')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivA_2')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseA')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE ('       ')
DLangTokenType.ID ('J')
WHITE_SPACE ('  ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivA_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseA')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivA_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseA')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseA')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivA_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseA')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivA_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseA')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseA')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivA_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivA_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivA_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivA_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// scope parameter')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseB')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('          ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
WHITE_SPACE ('      ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivB_1')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseB')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivB_2')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseB')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
WHITE_SPACE ('      ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivB_3')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseB')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivB_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseB')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivB_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseB')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivB_3')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseB')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseB')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivB_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseB')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivB_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseB')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivB_3')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// function storage class')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseC')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('          ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('      ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivC_1')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseC')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivC_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseC')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseC')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivC_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// increasing safety')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseE')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('          ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('         ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivE_1')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseE')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE ('   ')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivE_2')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseE')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivE_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseE')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivE_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseE')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseE')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivE_1')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('CovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('BaseE')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivE_2')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// @safe and @trusted')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseF')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test1')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test2')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('DerivF')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseF')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test1')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('trusted')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.override ('override')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('test2')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivF')
DLangTokenType.. ('.')
DLangTokenType.ID ('test1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseF')
DLangTokenType.. ('.')
DLangTokenType.ID ('test1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCovariantWith')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('DerivF')
DLangTokenType.. ('.')
DLangTokenType.ID ('test2')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('BaseF')
DLangTokenType.. ('.')
DLangTokenType.ID ('test2')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('// Needed for rvalueOf/lvalueOf because "inout on return means')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// inout must be on a parameter as well"')
WHITE_SPACE ('\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('__InoutWorkaroundStruct')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Creates an lvalue or rvalue of type $(D T) for $(D typeof(...)) and')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D __traits(compiles, ...)) purposes. No actual value is returned.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Note: Trying to use returned value will result in a')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('"Symbol Undefined" error at link time.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Example:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('---')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment (' Note that `f` doesn't have to be implemented')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment (' as is isn't called.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('int f(int);')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('bool f(ref int);')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('static assert(is(typeof(f(rvalueOf!int)) == int));')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('static assert(is(typeof(f(lvalueOf!int)) == bool));')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('int i = rvalueOf!int; ')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment (' error, no actual value is returned')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('---')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('rvalueOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('__InoutWorkaroundStruct')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('__InoutWorkaroundStruct')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('__InoutWorkaroundStruct')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('__InoutWorkaroundStruct')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// Note: unittest can't be used as an example here as function overloads')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// aren't allowed inside functions.')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('needLvalue')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Nested')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.++ ('++')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Nested')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Object')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('needLvalue')
DLangTokenType.( ('(')
DLangTokenType.ID ('rvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('needLvalue')
DLangTokenType.( ('(')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('rvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('rvalueOf')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.byte ('byte')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('127')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('lvalueOf')
DLangTokenType.! ('!')
DLangTokenType.byte ('byte')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('128')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// SomethingTypeOf')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('members')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getAliasThis')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('members')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasThisTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('members')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" does not have alias this type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AT')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('AT')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BooleanTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not boolean type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// unexpected failure, maybe dmd type-merging bug')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AT')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('AT')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeList')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not an integral type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AT')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('AT')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeList')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not a floating point type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not a numeric type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('NumericTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('NumericTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('UnsignedTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('               ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UnsignedIntTypeList')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UnsignedTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not an unsigned type."')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('               ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedIntTypeList')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SignedTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not an signed type."')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AT')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('AT')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('staticIndexOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not a character type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('wstring')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('dstring')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticArrayTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AT')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('AT')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.[ ('[')
DLangTokenType.ID ('n')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticArrayTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not a static array type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('   ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('              ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// SubTypeOf cannot have inout type')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.void ('void')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('StaticArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AT')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('AT')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('DynamicArrayTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not a dynamic array"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('void, ')
DLangTokenType.block_comment ('*/')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('NumericTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImaginaryTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ComplexTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE ('  ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('  ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('MutableOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ConstOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmutableOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ArrayTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('StaticArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ArrayTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not an array type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Always returns the Dynamic Array version.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// It is impossible to determine exact string type from typeof(null) -')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// it means that StringTypeOf!(typeof(null)) is undefined.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// Then this behavior is convenient for template constraint.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not a string type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('StringTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not a string type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('MutableOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ConstOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmutableOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSame')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('                ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Str')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.! ('!')
DLangTokenType.ID ('Str')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('Str')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('CharTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SharedOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedConstOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('AssocArrayTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AliasThisTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AT')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AT')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('AssocArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('AT')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('K')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('K')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('AssocArrayTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
DLangTokenType.~ ('~')
DLangTokenType.DOUBLE_QUOTED_STRING ('" is not an associative array type"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('bool, CharTypeList, NumericTypeList, ImaginaryTypeList, ComplexTypeList')
DLangTokenType.block_comment ('*/')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.ID ('R')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AssocArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.ID ('R')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('bool, CharTypeList, NumericTypeList, ImaginaryTypeList, ComplexTypeList')
DLangTokenType.block_comment ('*/')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('O')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('InoutOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SharedInoutOf')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('R')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('O')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.ID ('R')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('AssocArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('O')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('P')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.ID ('R')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('         ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('               ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('      ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('     ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ireal ('ireal')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('       ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ireal ('ireal')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('//TODO')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.creal ('creal')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('       ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.creal ('creal')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('//TODO')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('         ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AssocArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('BuiltinTypeOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('                                        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// isSomething')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is a built-in boolean type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBoolean')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BooleanTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBoolean')
DLangTokenType.! ('!')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EB')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBoolean')
DLangTokenType.! ('!')
DLangTokenType.ID ('EB')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Boolean')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is a built-in integral type. Types $(D bool),')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(D char), $(D wchar), and $(D dchar) are not considered integral.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isIntegral')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('IntegralTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isIntegral')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Integral')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Integral')
DLangTokenType.! ('!')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EU')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// base type is unsigned')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EI')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// base type is signed (bug 7909)')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isIntegral')
DLangTokenType.! ('!')
DLangTokenType.ID ('EU')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('  ')
DLangTokenType.ID ('isUnsigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('EU')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.ID ('EU')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isIntegral')
DLangTokenType.! ('!')
DLangTokenType.ID ('EI')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('EI')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('  ')
DLangTokenType.ID ('isSigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('EI')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is a built-in floating point type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFloatingPoint')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('FloatingPointTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EF')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('1.414')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('1.732')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('2.236')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FloatingPointTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('EF')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFloatingPoint')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FloatingPoint')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('IntegralTypeList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FloatingPoint')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is a built-in numeric type (integral or floating')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('point).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNumeric')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('NumericTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('NumericTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNumeric')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Numeric')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is a scalar type (a built-in numeric, character or boolean type).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isScalarType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNumeric')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBoolean')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ScalarType')
DLangTokenType.! ('!')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isScalarType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isScalarType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isScalarType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isScalarType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is a basic type (scalar type or void).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBasicType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isScalarType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isBasicType')
DLangTokenType.! ('!')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isBasicType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isBasicType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isBasicType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isBasicType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is a built-in unsigned numeric type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsigned')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('UnsignedTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('UnsignedIntTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isUnsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is a built-in signed numeric type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSigned')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('SignedTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SignedIntTypeList')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is one of the built-in character types.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('The built-in char types are any of $(D char), $(D wchar) or $(D dchar), with or without qualifiers.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Char types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.wchar ('wchar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.CHARACTER_LITERAL (''c'')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Non char types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeChar')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeChar')
DLangTokenType.! ('!')
DLangTokenType.byte ('byte')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeChar')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeChar')
DLangTokenType.! ('!')
DLangTokenType.ID ('wstring')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeChar')
DLangTokenType.! ('!')
DLangTokenType.ID ('dstring')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeChar')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('EC')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''x'')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''y'')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('CharTypeList')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('EC')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeChar')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is one of the built-in string types.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('The built-in string types are $(D Char[]), where $(D Char) is any of $(D char),')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D wchar) or $(D dchar), with or without qualifiers.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Static arrays of characters (like $(D char[80])) are not considered')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('built-in string types.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//String types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.wchar ('wchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.dchar ('dchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"aaa"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ES')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"aaa"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"bbb"')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.! ('!')
DLangTokenType.ID ('ES')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Non string types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeString')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.byte ('byte')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('wstring')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('dstring')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('           ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is a narrow string.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' All arrays that use char, wchar, and their qualified versions are narrow')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' strings. (Those include string and wstring).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNarrowString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNarrowString')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNarrowString')
DLangTokenType.! ('!')
DLangTokenType.ID ('wstring')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNarrowString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNarrowString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.wchar ('wchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('NarrowString')
DLangTokenType.! ('!')
DLangTokenType.ID ('dstring')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('NarrowString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.dchar ('dchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('wstring')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('MutableOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ConstOf')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmutableOf')
DLangTokenType.) (')')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('TypeQualifierList')
DLangTokenType.block_comment ('*/')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNarrowString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('NarrowString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('dstring')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('NarrowString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('NarrowString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is a struct or static array that is implicitly')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('convertible to a string.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isConvertibleToString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isConvertibleToString')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasedString')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ConvertibleToString')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isConvertibleToString')
DLangTokenType.! ('!')
DLangTokenType.ID ('AliasedString')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isConvertibleToString')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('25')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.package ('package')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('convertToString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isConvertibleToString')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('convertToString')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('StringTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('convertToString')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is a string that will be autodecoded.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' All arrays that use char, wchar, and their qualified versions are narrow')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' strings. (Those include string and wstring).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Aggregates that implicitly cast to narrow strings are included.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Params:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('      T = type to be tested')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('      true if T represents a string that is subject to autodecoding')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' See Also:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('      $(LREF isNarrowString)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAutodecodableString')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Stringish')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAutodecodableString')
DLangTokenType.! ('!')
DLangTokenType.ID ('wstring')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAutodecodableString')
DLangTokenType.! ('!')
DLangTokenType.ID ('Stringish')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AutodecodableString')
DLangTokenType.! ('!')
DLangTokenType.ID ('dstring')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is a static array.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('StaticArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.char ('char')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.int ('int')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('51')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                           ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.int ('int')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('11')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('13u')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('                           ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('StaticArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//enum ESA : int[1] { a = [1], b = [2] }')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//static assert( isStaticArray!ESA);')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is a dynamic array.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('DynamicArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.long ('long')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('DynamicArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('DynamicArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('            ')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('DynamicArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is an array (static or dynamic; for associative')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('  arrays see $(LREF isAssociativeArray)).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isArray')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isStaticArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDynamicArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Array')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Array')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.uint ('uint')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Array')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Array')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is an associative array type')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssociativeArray')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('AssocArrayTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('keys')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.null ('null')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('values')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.null ('null')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.int ('int')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.int ('int')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.ID ('Foo')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AssociativeArray')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//enum EAA : int[int] { a = [1:1], b = [2:2] }')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//static assert( isAssociativeArray!EAA);')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is a builtin type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBuiltinType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('BuiltinTypeOf')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBuiltinType')
DLangTokenType.! ('!')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBuiltinType')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBuiltinType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBuiltinType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BuiltinType')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BuiltinType')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BuiltinType')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BuiltinType')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('BuiltinType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is a SIMD vector type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSIMDVector')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('N')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('N')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimdVec')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSIMDVector')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSIMDVector')
DLangTokenType.! ('!')
DLangTokenType.ID ('SimdVec')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SIMDVector')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SIMDVector')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is a pointer.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isPointer')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.* ('*')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.* ('*')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeQualifierList')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isPointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Pointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('SubTypeOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Q')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Pointer')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Pointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.uint ('uint')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Pointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Pointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.null ('null')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the target type of a pointer.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('PointerTarget')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether type $(D T) is an aggregate type.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.union ('union')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('                               ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.interface ('interface')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AggregateType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns $(D true) if T can be iterated over using a $(D foreach) loop with')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' a single loop variable of automatically inferred type, regardless of how')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' the $(D foreach) loop is implemented.  This includes ranges, structs')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('classes')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' that define $(D opApply) with a single loop variable, and builtin dynamic,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' static and associative arrays.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isIterable')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('elem')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('OpApply')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opApply')
DLangTokenType.( ('(')
DLangTokenType.scope ('scope')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('dg')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Range')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('front')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('popFront')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('empty')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isIterable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isIterable')
DLangTokenType.! ('!')
DLangTokenType.ID ('OpApply')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isIterable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isIterable')
DLangTokenType.! ('!')
DLangTokenType.ID ('Range')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Iterable')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns true if T is not const or immutable.  Note that isMutable is true for')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' string, or immutable(char)[], because the 'head' is mutable.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isMutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isMutable')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isMutable')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isMutable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isMutable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Mutable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Mutable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Mutable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Mutable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Mutable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns true if T is an instance of the template S.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.! ('!')
DLangTokenType.ID ('Args')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('/// ditto')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('impl')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.! ('!')
DLangTokenType.ID ('Args')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Args')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('impl')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isInstanceOf')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('impl')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Bar')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Doo')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('ABC')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('fun')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('templ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Bar')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Doo')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Doo')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ABC')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ABC')
DLangTokenType.! ('!')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('fun')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fun')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('templ')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('templ')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('fun1')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('fun2')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('templ1')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('templ2')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('fun1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('fun2')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('InstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('templ1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('templ2')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check whether the tuple T is an expression tuple.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' An expression tuple only contains expressions.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' See_Also: $(LREF isTypeTuple).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressions')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressions')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('isExpressions')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('isExpressions')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressions')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('ex')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressions')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// default')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isExpressions')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('2.0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Expressions')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Expressions')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('2.0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Alternate name for $(LREF isExpressions), kept for legacy compatibility.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n\n')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressionTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressions')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('aa')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.[ ('[')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('myint')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('aa')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"cattywampus"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('2.7')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('aa')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ExpressionTuple')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ExpressionTuple')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('ExpressionTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('myint')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Check whether the tuple $(D T) is a type tuple.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' A type tuple only contains types.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' See_Also: $(LREF isExpressions).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// default')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.FLOAT_LITERAL ('2.0')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.new ('new')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('CONST')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isTypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.ID ('CONST')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether symbol or type $(D T) is a function pointer.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunctionPointer')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunctionPointer')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunctionPointer')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('fpfoo')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
DLangTokenType.ID ('foo')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('fpfoo')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('dgbar')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
DLangTokenType.ID ('bar')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('dgbar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunctionPointer')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether symbol or type $(D T) is a delegate.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// T is a (nested) function symbol.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('W')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('W')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// T is an expression or a type.  Take the type of it and examine.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('W')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDelegate')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('sfunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.++ ('++')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('dg')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('dg')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isDelegate')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('fp')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Delegate')
DLangTokenType.! ('!')
DLangTokenType.ID ('fp')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Delegate')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Delegate')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('sfunc')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether symbol or type $(D T) is a function, a function pointer or a delegate.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// T is a (nested) function symbol.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('W')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('W')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// T is an expression or a type.  Take the type of it and examine.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('W')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// function pointer')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('W')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('W')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('nestedFunc')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('nestedProp')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('method')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('prop')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.new ('new')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('fp')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
DLangTokenType.ID ('func')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('dg')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.& ('&')
DLangTokenType.ID ('c')
DLangTokenType.. ('.')
DLangTokenType.ID ('method')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('nestedFunc')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('nestedProp')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('method')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType.. ('.')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType.. ('.')
DLangTokenType.ID ('prop')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('fp')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('dg')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.ref ('ref')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeFunction')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('val')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeFunction')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('SomeFunction')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Detect whether $(D T) is a callable object, which can be called with the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('function call operator $(D $(LPAREN)...$(RPAREN)).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('opCall')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// T is a object which has a member function opCall().')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('opCall')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// T is a type which has a static member function opCall().')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('opCall')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.new ('new')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType.. ('.')
DLangTokenType.ID ('opCall')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('I')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCallable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Callable')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is a an abstract function.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAbstractFunction')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAbstractFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAbstractFunction')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('AC')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.abstract ('abstract')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AbstractFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AbstractFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAbstractFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('AC')
DLangTokenType.. ('.')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is a a final function.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalFunction')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFinalFunction')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.final ('final')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('FC')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.final ('final')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FinalFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('bar')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FC')
DLangTokenType.. ('.')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FinalFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('bar')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Determines whether function $(D f) requires a context pointer.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNestedFunction')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNestedFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNested')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('g')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('NestedFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('f')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isNestedFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('g')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is a an abstract class.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAbstractClass')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAbstractClass')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isAbstractClass')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.abstract ('abstract')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('AC')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AbstractClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('AbstractClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isAbstractClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('AC')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether $(D T) is a a final class.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalClass')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalClass')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFinalClass')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.abstract ('abstract')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('AC')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.final ('final')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('FC1')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.final ('final')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('FC2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FinalClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FinalClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('AC')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('FC1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinalClass')
DLangTokenType.! ('!')
DLangTokenType.ID ('FC2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// General Types')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Removes all qualifiers, if any, from type $(D T).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.version ('version')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('none')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// Error: recursive alias declaration @@@BUG1308@@@')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('             ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('     ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('     ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('    ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('                                    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('        ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// workaround')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('             ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('          ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('              ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('                                             ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unqual')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('                   ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('             ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('       ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('       ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('         ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ImmIntArr')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Unqual')
DLangTokenType.! ('!')
DLangTokenType.ID ('ImmIntArr')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// [For internal use]')
WHITE_SPACE ('\n')
DLangTokenType.package ('package')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Modifier')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('         ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('          ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('          ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('              ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('              ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('              ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('                                             ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('                    ')
DLangTokenType.ID ('Modifier')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Intify')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE ('                    ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('                    ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE ('              ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('              ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Intify')
DLangTokenType., (',')
WHITE_SPACE ('          ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('          ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Copies type qualifiers from $(D FromType) to $(D ToType).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Supported type qualifiers:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' $(UL')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     $(LI $(D const))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     $(LI $(D inout))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     $(LI $(D immutable))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     $(LI $(D shared))')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' )')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.( ('(')
DLangTokenType.ID ('FromType')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ToType')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ToType')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CopyTypeQualifiers')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FromType')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('                   ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('                    ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('             ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('              ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('       ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('       ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('        ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('         ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('          ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the type of `Target` with the "constness" of `Source`. A type's $(BOLD constness)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('refers to whether it is `const`, `immutable`, or `inout`. If `source` has no constness, the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('returned type will be the same as `Target`.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.( ('(')
DLangTokenType.ID ('FromType')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ToType')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unshared')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unshared')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CopyConstness')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unshared')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyTypeQualifiers')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FromType')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ToType')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('u')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('u')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//The 'shared' qualifier will not be copied')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//But the constness will be')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Careful, const(int)[] is a mutable array of const(int)')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('MutT')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.( ('(')
DLangTokenType.ID ('MutT')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Okay, const(int[]) applies to array and contained ints')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('CstT')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CstT')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('method1')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('method2')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('method3')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('method1')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('method2')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.byte ('byte')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('Test')
DLangTokenType.. ('.')
DLangTokenType.ID ('method3')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
WHITE_SPACE ('                   ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('             ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
WHITE_SPACE ('              ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE ('              ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('       ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE ('             ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('             ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('       ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE ('       ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.shared ('shared')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('CopyConstness')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
WHITE_SPACE ('          ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('   ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the inferred type of the loop variable when a variable of type T')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('is iterated over using a $(D foreach) loop with a single loop variable and')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('automatically inferred return type.  Note that this may not be the same as')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D std.range.ElementType!Range) in the case of narrow strings, or if T')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('has both opApply and a range interface.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('ForeachType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ForeachType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ReturnType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('elem')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('elem')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ForeachType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ForeachType')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.char ('char')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ForeachType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ForeachType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.inout ('inout')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Strips off all $(D enum)s from type $(D T).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.enum ('enum')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('                        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('              ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Impl')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.. ('.')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('G')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('F')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('E')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('F')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('G')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get the Key type of an Associative Array.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('KeyType')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('K')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('K')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('K')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('KeyType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ValueType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('KeyType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.ID ('str')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// str is declared as string')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('ValueType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.ID ('num')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// num is declared as int')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Get the Value type of an Associative Array.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('ValueType')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('K')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('K')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('traits')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.ID ('string')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('KeyType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ValueType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('KeyType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.ID ('str')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// str is declared as string')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('ValueType')
DLangTokenType.! ('!')
DLangTokenType.ID ('Hash')
WHITE_SPACE (' ')
DLangTokenType.ID ('num')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// num is declared as int')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns the corresponding unsigned type for T. T must be a numeric')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' integral type, otherwise a compile-time error occurs.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('N')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('N')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('N')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isUnsigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('FloatingPoint')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('cent')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ucent')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Type "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                 ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" does not have an Unsigned counterpart"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Impl')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('U1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('U2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('U3')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U3')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UV1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('UV2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('UV1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('UV2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//struct S {}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//alias U2 = Unsigned!S;')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//alias U3 = Unsigned!double;')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('U4')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('cent')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('U5')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('cent')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('U6')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Unsigned')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('cent')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U4')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U5')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U6')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the largest type, i.e. T such that T.sizeof is the largest.  If more')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('than one type is of the same size, the leftmost argument of these in will be')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('returned.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Largest')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Largest')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('sizeof')
WHITE_SPACE (' ')
DLangTokenType.>= ('>=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('sizeof')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Largest')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Largest')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Largest')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
DLangTokenType./ ('/')
DLangTokenType.INTEGER_LITERAL ('2')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Largest')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('ucent')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the corresponding signed type for T. T must be a numeric integral type,')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('otherwise a compile-time error occurs.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('N')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('V')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('N')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.ID ('Impl')
DLangTokenType.! ('!')
DLangTokenType.ID ('V')
DLangTokenType.[ ('[')
DLangTokenType.ID ('N')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isSigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isUnsigned')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ubyte ('ubyte')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE ('  ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('ucent')
WHITE_SPACE (' ')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Impl')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('cent')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Type "')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE ('\n')
WHITE_SPACE ('                                 ')
DLangTokenType.DOUBLE_QUOTED_STRING ('" does not have an Signed counterpart"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('ModifyTypePreservingTQ')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Impl')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('OriginalType')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.immutable ('immutable')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('ucent')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.ID ('ucent')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('cent')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.float ('float')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SV1')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('SV2')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Signed')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.uint ('uint')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('SV1')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('SV2')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('__vector')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the most negative value of the numeric type T.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('mostNegative')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isNumeric')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isSomeChar')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.ID ('isBoolean')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('min_normal')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('mostNegative')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('max')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('min')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
WHITE_SPACE (' ')
DLangTokenType.ID ('mostNegative')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('mostNegative')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('min')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mostNegative')
DLangTokenType.! ('!')
DLangTokenType.float ('float')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.float ('float')
DLangTokenType.. ('.')
DLangTokenType.ID ('max')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mostNegative')
DLangTokenType.! ('!')
DLangTokenType.double ('double')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.double ('double')
DLangTokenType.. ('.')
DLangTokenType.ID ('max')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mostNegative')
DLangTokenType.! ('!')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.real ('real')
DLangTokenType.. ('.')
DLangTokenType.ID ('max')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mostNegative')
DLangTokenType.! ('!')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.byte ('byte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mostNegative')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('min')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('TypeTuple')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ubyte ('ubyte')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ushort ('ushort')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ulong ('ulong')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.char ('char')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.wchar ('wchar')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.dchar ('dchar')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mostNegative')
DLangTokenType.! ('!')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DLangTokenType.line_comment ('//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('// Misc.')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Returns the mangled name of symbol or type $(D sth).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('$(D mangledName) is the same as builtin $(D .mangleof) property, except that')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('the correct names of property functions are obtained.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('module test;')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('import std.traits : mangledName;')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('class C')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('{')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('    int value() @property;')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('}')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('pragma(msg, C.value.mangleof);      ')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment (' prints "i"')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('pragma(msg, mangledName!(C.value)); ')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment ('/')
DLangTokenType.block_comment (' prints "_D4test1C5valueMFNdZi"')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('--------------------')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('mangledName')
DLangTokenType.( ('(')
DLangTokenType.ID ('sth')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('sth')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('sth')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// sth[0] is a template symbol')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('mangledName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('removeDummyEnvelope')
DLangTokenType.( ('(')
DLangTokenType.ID ('Dummy')
DLangTokenType.! ('!')
DLangTokenType.ID ('sth')
DLangTokenType.. ('.')
DLangTokenType.ID ('Hook')
DLangTokenType.. ('.')
DLangTokenType.ID ('mangleof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('mangledName')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('sth')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('mangleof')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Dummy')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Hook')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.private ('private')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('removeDummyEnvelope')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// remove --> S3std6traits ... Z4Hook')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('12')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('6')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// remove --> DIGIT+ __T5Dummy')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
WHITE_SPACE (' ')
DLangTokenType.< ('<')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''0'')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''9'')
WHITE_SPACE (' ')
DLangTokenType.< ('<')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.[ ('[')
DLangTokenType.ID ('i')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('9')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// __T5Dummy')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// remove --> T | V | S')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('kind')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('kind')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''S'')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// it's a symbol')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' The mangled symbol name is packed in LName --> Number Name.  Here')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' we are chopping off the useless preceding Number, which is the')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' length of Name in decimal notation.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' NOTE: n = m + Log(m) + 1;  n = LName.length, m = Name.length.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('         ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('m_upb')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('10')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('        ')
DLangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('k')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.line_comment ('// k = Log(m_upb)')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('n')
WHITE_SPACE (' ')
DLangTokenType.< ('<')
WHITE_SPACE (' ')
DLangTokenType.ID ('m_upb')
WHITE_SPACE (' ')
DLangTokenType.+ ('+')
WHITE_SPACE (' ')
DLangTokenType.ID ('k')
WHITE_SPACE (' ')
DLangTokenType.+ ('+')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.line_comment ('// Now m_upb/10 <= m < m_upb; hence k = Log(m) + 1.')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.ID ('s')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.[ ('[')
DLangTokenType.ID ('k')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.ID ('m_upb')
WHITE_SPACE (' ')
DLangTokenType.*= ('*=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('10')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('property')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.. ('.')
DLangTokenType.ID ('mangleof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('mangleof')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('12')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"5valueMFNdZi"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('mangledName')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"3std6traits11mangledName"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('removeDummyEnvelope')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"_D3std6traits19removeDummyEnvelopeFAyaZAya"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.pure ('pure')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('   ')
DLangTokenType.line_comment ('// issue 9148')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.+ ('+')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"DFNaNbNiNfiZi"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// pure nothrow @safe @nogc')
WHITE_SPACE ('\n')
WHITE_SPACE ('  ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.+ ('+')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"DFNbNiNfiZi"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// nothrow @safe @nnogc')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('system')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// @system due to demangle')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Test for bug 5718')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('demangle')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangle')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo_demangled')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangle')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('foo')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('foo_demangled')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"int "')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo_demangled')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('3')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"foo"')
DLangTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('foo_demangled')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar_demangled')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('demangle')
DLangTokenType.( ('(')
DLangTokenType.ID ('mangledName')
DLangTokenType.! ('!')
DLangTokenType.ID ('bar')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('bar_demangled')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"void "')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('bar_demangled')
DLangTokenType.[ ('[')
DLangTokenType.$ ('$')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
DLangTokenType... ('..')
WHITE_SPACE (' ')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"bar()"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n\n\n')
DLangTokenType.line_comment ('// XXX Select & select should go to another module. (functional or algorithm?)')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('Aliases itself to $(D T[0]) if the boolean $(D condition) is $(D true)')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('and to $(D T[1]) otherwise.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Select')
DLangTokenType.( ('(')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('condition')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Alias')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('Select')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Alias')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.! ('!')
DLangTokenType.ID ('condition')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// can select types')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Select')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.true ('true')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Select')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.long ('long')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Foo')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('Select')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.const ('const')
DLangTokenType.( ('(')
DLangTokenType.ID ('Foo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// can select symbols')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('selA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Select')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.true ('true')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('selB')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Select')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('selA')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('selB')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// can select (compile-time) expressions')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('val')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Select')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('9')
WHITE_SPACE (' ')
DLangTokenType.- ('-')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('6')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('val')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('If $(D cond) is $(D true), returns $(D a) without evaluating $(D')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('b). Otherwise, returns $(D b) without evaluating $(D a).')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.ID ('select')
DLangTokenType.( ('(')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('cond')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.lazy ('lazy')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.line_comment ('/// Ditto')
WHITE_SPACE ('\n')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.ID ('select')
DLangTokenType.( ('(')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('cond')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
DLangTokenType.) (')')
DLangTokenType.( ('(')
DLangTokenType.lazy ('lazy')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.real ('real')
WHITE_SPACE (' ')
DLangTokenType.ID ('pleasecallme')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('dontcallme')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('select')
DLangTokenType.! ('!')
DLangTokenType.true ('true')
DLangTokenType.( ('(')
DLangTokenType.ID ('pleasecallme')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('dontcallme')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.auto ('auto')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('select')
DLangTokenType.! ('!')
DLangTokenType.false ('false')
DLangTokenType.( ('(')
DLangTokenType.ID ('dontcallme')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('pleasecallme')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('/+')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    Determine if a symbol has a given')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    $(DDSUBLINK spec')
DLangTokenType.NESTING_BLOCK_COMMENT ('/')
DLangTokenType.NESTING_BLOCK_COMMENT ('attribute, uda, user-defined attribute).')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    See_Also:')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('        $(LREF getUDAs)')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('  ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUDA')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('symbol')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('symbol')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('E')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('d')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('e')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('e')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('e')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('e')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('e')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('g')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('E')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('100')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('h')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('100')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Named')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Named')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"abc"')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Named')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Named')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"abc"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Named')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"def"')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('j')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('j')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('j')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('j')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hello"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"world"')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('k')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('k')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('k')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('k')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('fourtyTwo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DLangTokenType.ID ('getLen')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('getLen')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('l')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('l')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('l')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('fourtyTwo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('l')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('getLen')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('l')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('fourtyTwo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('l')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('getLen')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('getLen')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('m')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('m')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('m')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('fourtyTwo')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('m')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('getLen')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('m')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('fourtyTwo')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('m')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('getLen')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('/+')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    Gets the matching $(DDSUBLINK spec')
DLangTokenType.NESTING_BLOCK_COMMENT ('/')
DLangTokenType.NESTING_BLOCK_COMMENT ('attribute, uda, user-defined attributes)')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    from the given symbol.')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    If the UDA is a type, then any UDAs of the same type on the symbol will')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    match. If the UDA is a template for a type, then any UDA which is an')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    instantiation of that template will match. And if the UDA is a value,')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    then any UDAs on the symbol which are equal to that value will match.')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('    See_Also:')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('        $(LREF hasUDA)')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('  ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('getUDAs')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('symbol')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Filter')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDesiredUDA')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('toCheck')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.! ('!')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isTemplate')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('toCheck')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDesiredUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('toCheck')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDesiredUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('toCheck')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isTemplate')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDesiredUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE ('  ')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('attribute')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('toCheck')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('                ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDesiredUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('toCheck')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isTemplate')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDesiredUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('isInstanceOf')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('attribute')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('toCheck')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isDesiredUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('toCheck')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('getUDAs')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Filter')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('isDesiredUDA')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('getAttributes')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('symbol')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"string"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('9999')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('b')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pi"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pi"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('c')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('99')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pi"')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('AttrT')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('d')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pi"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Answer"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.uint ('uint')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Pi"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('d')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AttrT')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('value')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimpleAttr')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('SimpleAttr')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('e')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('e')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimpleAttr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('e')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimpleAttr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimpleAttr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('SimpleAttr')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimpleAttr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('f')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimpleAttr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('SimpleAttr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('f')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('add42')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('v')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('v')
WHITE_SPACE (' ')
DLangTokenType.+ ('+')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('concat')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('l')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('r')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.return ('return')
WHITE_SPACE (' ')
DLangTokenType.ID ('l')
WHITE_SPACE (' ')
DLangTokenType.~ ('~')
WHITE_SPACE (' ')
DLangTokenType.ID ('r')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('g')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('47')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('47')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('concat')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('g')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('concat')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('h')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('47')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('47')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('add42')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('47')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('concat')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('h')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('FuncAttr')
DLangTokenType.! ('!')
DLangTokenType.ID ('concat')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('i')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alpha"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('42')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('i')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.CHARACTER_LITERAL (''c'')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Gets all symbols within `symbol` that have the given user-defined attribute.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' This is not recursive; it will not search for symbols within symbols such as')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' nested structs or unions.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.( ('(')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('symbol')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('format')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('format')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Filter')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// translate a list of strings into symbols. mixing in the entire alias')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// avoids trying to access the symbol, which could cause a privacy violation')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('toSymbols')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('toSymbols')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.mixin ('mixin')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"alias toSymbols = AliasSeq!(symbol.%s, toSymbols!(names[1..$]));"')
WHITE_SPACE ('\n')
WHITE_SPACE ('                  ')
DLangTokenType.. ('.')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.ID ('names')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// filtering out nested class context')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('noThisMember')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.!= ('!=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"this"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('membersWithoutNestedCC')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('Filter')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('noThisMember')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('allMembers')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('symbol')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('hasSpecificUDA')
DLangTokenType.( ('(')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.mixin ('mixin')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"hasUDA!(symbol.%s, attribute)"')
DLangTokenType.. ('.')
DLangTokenType.ID ('format')
DLangTokenType.( ('(')
DLangTokenType.ID ('name')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('membersWithUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('toSymbols')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('Filter')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasSpecificUDA')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('membersWithoutNestedCC')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// if the symbol itself has the UDA, tack it on to the front of the list')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('symbol')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('attribute')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('getSymbolsByUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('symbol')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('membersWithUDA')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('getSymbolsByUDA')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('membersWithUDA')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Attr')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('b')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Attr')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('doStuff')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('doOtherStuff')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('Inner')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.line_comment ('// Not found by getSymbolsByUDA')
WHITE_SPACE ('\n')
WHITE_SPACE ('            ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Attr')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('c')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Finds both variables and functions with the attribute, but')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// doesn't include the variables and functions without it.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Can access attributes on the symbols returned by getSymbolsByUDA.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('UDA')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('name')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('B')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('UDA')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"X"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('UDA')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"Y"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('y')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.( ('(')
DLangTokenType.INTEGER_LITERAL ('100')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('z')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Finds both UDA attributes.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('B')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UDA')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Finds one `100` attribute.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('B')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('100')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Can get the value of the UDA from the return value')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getUDAs')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('B')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UDA')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UDA')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('name')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"X"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('UDA')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"A"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('UDA')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"B"')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('d')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// Also checks the symbol itself')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UDA')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UDA')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"C"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('UDA')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"d"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('D')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('x')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('//Finds nothing if there is no member with specific UDA')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('D')
DLangTokenType., (',')
DLangTokenType.ID ('UDA')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// #15335: getSymbolsByUDA fails if type has private members')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// HasPrivateMembers has, well, private members, one of which has a UDA.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('internal')
DLangTokenType.. ('.')
DLangTokenType.ID ('test')
DLangTokenType.. ('.')
DLangTokenType.ID ('uda')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('HasPrivateMembers')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('HasPrivateMembers')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('HasPrivateMembers')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('hasUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('HasPrivateMembers')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('// #16387: getSymbolsByUDA works with structs but fails with classes')
WHITE_SPACE ('\n')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('A')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.@ ('@')
DLangTokenType.ID ('Attr')
WHITE_SPACE (' ')
DLangTokenType.uint ('uint')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('res')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('getSymbolsByUDA')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('A')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('Attr')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('res')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('res')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.. ('.')
DLangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"a"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   Returns: $(D true) iff all types $(D T) are the same.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('allSameType')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.<= ('<=')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('allSameType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('allSameType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType... ('..')
DLangTokenType.$ ('$')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('allSameType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.short ('short')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.real ('real')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   Returns: $(D true) iff the type $(D T) can be tested in an $(D')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('   if)-expression, that is if $(D if (pred(T.init)) {}) is compilable.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('ifTestable')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.alias ('alias')
WHITE_SPACE (' ')
DLangTokenType.ID ('pred')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.=> ('=>')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('compiles')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('pred')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('meta')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('allSatisfy')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('allSatisfy')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('ifTestable')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('AliasSeq')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.int ('int')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.float ('float')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.double ('double')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('BoolWrapper')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.bool ('bool')
WHITE_SPACE (' ')
DLangTokenType.ID ('value')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.! ('!')
DLangTokenType.ID ('ifTestable')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.bool ('bool')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('a')
WHITE_SPACE (' ')
DLangTokenType.=> ('=>')
WHITE_SPACE (' ')
DLangTokenType.ID ('BoolWrapper')
DLangTokenType.( ('(')
DLangTokenType.ID ('a')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether `X` is a type. Analogous to `is(X)`. This is useful when used')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' in conjunction with other templates, e.g. `allSatisfy!(isType, X)`.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('      `true` if `X` is a type, `false` otherwise')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isType')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isType')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('Test')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.interface ('interface')
WHITE_SPACE (' ')
DLangTokenType.ID ('I')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.union ('union')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isType')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isType')
DLangTokenType.! ('!')
DLangTokenType.ID ('string')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isType')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.int ('int')
DLangTokenType.[ ('[')
DLangTokenType.int ('int')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isType')
DLangTokenType.! ('!')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isType')
DLangTokenType.! ('!')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isType')
DLangTokenType.! ('!')
DLangTokenType.ID ('I')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isType')
DLangTokenType.! ('!')
DLangTokenType.ID ('U')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('n')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Type')
DLangTokenType.! ('!')
DLangTokenType.ID ('n')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Type')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Type')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('Test')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Type')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('Test')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether symbol or type `X` is a function. This is different that finding')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' if a symbol is callable or satisfying `is(X == function)`, it finds')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' specifically if the symbol represents a normal function declaration, i.e.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' not a delegate or a function pointer.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     `true` if `X` is a function, `false` otherwise')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' See_Also:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     Use $(REF isFunctionPointer) or $(REF isDelegate) for detecting those types')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     respectively.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunction')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.: (':')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
DLangTokenType.* ('*')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.&& ('&&')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.|| ('||')
WHITE_SPACE ('\n')
WHITE_SPACE ('               ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
DLangTokenType.& ('&')
DLangTokenType.ID ('X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.ID ('U')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.delegate ('delegate')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// x is a (nested) function symbol.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.true ('true')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.ID ('T')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.line_comment ('// x is a type.  Take the type of it and examine.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('T')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.function ('function')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFunction')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('func')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFunction')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('func')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.block_comment ('/*')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Detect whether `X` is a final method or class.')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment (' Returns:')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*')
DLangTokenType.block_comment ('     `true` if `X` is final, `false` otherwise')
DLangTokenType.block_comment ('\n')
DLangTokenType.block_comment (' ')
DLangTokenType.block_comment ('*/')
WHITE_SPACE ('\n')
DLangTokenType.template ('template')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinal')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.... ('...')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.. ('.')
DLangTokenType.ID ('length')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.ID ('X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
WHITE_SPACE (' ')
DLangTokenType.== ('==')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
DLangTokenType.) (')')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinal')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFinalClass')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE (' ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.if ('if')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFunction')
DLangTokenType.! ('!')
DLangTokenType.ID ('X')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinal')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.__traits ('__traits')
DLangTokenType.( ('(')
DLangTokenType.ID ('isFinalFunction')
DLangTokenType., (',')
WHITE_SPACE (' ')
DLangTokenType.ID ('X')
DLangTokenType.[ ('[')
DLangTokenType.INTEGER_LITERAL ('0')
DLangTokenType.] (']')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.else ('else')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinal')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.false ('false')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('nf')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('sf')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.final ('final')
WHITE_SPACE (' ')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('ff')
DLangTokenType.( ('(')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.final ('final')
WHITE_SPACE (' ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('FC')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Final')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinal')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('FC')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Final')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('nf')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Final')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('sf')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isFinal')
DLangTokenType.! ('!')
DLangTokenType.( ('(')
DLangTokenType.ID ('C')
DLangTokenType.. ('.')
DLangTokenType.ID ('ff')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.NESTING_BLOCK_COMMENT ('/+')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT (' Determines whether the type `S` can be copied.')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT (' If a type cannot be copied, then code such as `MyStruct x; auto y = x;` will fail to compile.')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT (' Copying for structs can be disabled by using `@disable this(this)`.')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT (' Params:')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('  S = The type to check.')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT (' Returns:')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('  `true` if `S` can be copied. `false` otherwise.')
DLangTokenType.NESTING_BLOCK_COMMENT ('\n')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT (' ')
DLangTokenType.NESTING_BLOCK_COMMENT ('+')
DLangTokenType.NESTING_BLOCK_COMMENT ('+/')
WHITE_SPACE ('\n')
DLangTokenType.enum ('enum')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCopyable')
DLangTokenType.( ('(')
DLangTokenType.ID ('S')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.is ('is')
DLangTokenType.( ('(')
DLangTokenType.typeof ('typeof')
DLangTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.{ ('{')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
DLangTokenType.. ('.')
DLangTokenType.ID ('init')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.ID ('S')
WHITE_SPACE (' ')
DLangTokenType.ID ('copy')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.ID ('foo')
DLangTokenType.; (';')
WHITE_SPACE (' ')
DLangTokenType.} ('}')
WHITE_SPACE ('\n')
DLangTokenType.) (')')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.line_comment ('///')
WHITE_SPACE ('\n')
DLangTokenType.@ ('@')
DLangTokenType.ID ('safe')
WHITE_SPACE (' ')
DLangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('                        ')
DLangTokenType.line_comment ('// Fine. Can be copied')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S2')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
WHITE_SPACE ('         ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.} ('}')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// Fine. Can be copied')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.@ ('@')
DLangTokenType.ID ('disable')
WHITE_SPACE (' ')
DLangTokenType.this ('this')
DLangTokenType.( ('(')
DLangTokenType.this ('this')
DLangTokenType.) (')')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
DLangTokenType.} ('}')
WHITE_SPACE ('  ')
DLangTokenType.line_comment ('// Not fine. Copying is disabled.')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.struct ('struct')
WHITE_SPACE (' ')
DLangTokenType.ID ('S4')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.ID ('S3')
WHITE_SPACE (' ')
DLangTokenType.ID ('s')
DLangTokenType.; (';')
DLangTokenType.} ('}')
WHITE_SPACE ('                   ')
DLangTokenType.line_comment ('// Not fine. A field has copying disabled.')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.class ('class')
WHITE_SPACE (' ')
DLangTokenType.ID ('C1')
WHITE_SPACE (' ')
DLangTokenType.{ ('{')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCopyable')
DLangTokenType.! ('!')
DLangTokenType.ID ('S1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
WHITE_SPACE (' ')
DLangTokenType.ID ('isCopyable')
DLangTokenType.! ('!')
DLangTokenType.ID ('S2')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Copyable')
DLangTokenType.! ('!')
DLangTokenType.ID ('S3')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.!is ('!is')
DLangTokenType.ID ('Copyable')
DLangTokenType.! ('!')
DLangTokenType.ID ('S4')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isCopyable')
DLangTokenType.! ('!')
DLangTokenType.ID ('C1')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.static ('static')
WHITE_SPACE (' ')
DLangTokenType.assert ('assert')
DLangTokenType.( ('(')
DLangTokenType.ID ('isCopyable')
DLangTokenType.! ('!')
DLangTokenType.int ('int')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')