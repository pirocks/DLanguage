DLangTokenType.import ('import')
WHITE_SPACE (' ')
DLangTokenType.ID ('std')
DLangTokenType.. ('.')
DLangTokenType.ID ('stdio')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
DLangTokenType.void ('void')
WHITE_SPACE (' ')
DLangTokenType.ID ('main')
DLangTokenType.( ('(')
DLangTokenType.) (')')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n\n')
DLangTokenType.int ('int')
WHITE_SPACE (' ')
DLangTokenType.ID ('number')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.ID ('string')
WHITE_SPACE (' ')
DLangTokenType.ID ('message')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.switch ('switch')
WHITE_SPACE (' ')
DLangTokenType.( ('(')
DLangTokenType.ID ('number')
DLangTokenType.) (')')
WHITE_SPACE ('\n')
DLangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.default ('default')
DLangTokenType.: (':')
WHITE_SPACE ('    ')
DLangTokenType.line_comment ('// valid: ends with 'throw'')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.throw ('throw')
WHITE_SPACE (' ')
DLangTokenType.new ('new')
WHITE_SPACE (' ')
DLangTokenType.ID ('Exception')
DLangTokenType.( ('(')
DLangTokenType.DOUBLE_QUOTED_STRING ('"unknown number"')
DLangTokenType.) (')')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('3')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.line_comment ('// valid: ends with 'break' (break out of the 'switch' only)')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('message')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"three "')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.break ('break')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('4')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.line_comment ('// valid: ends with 'continue' (continue the enclosing loop)')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('message')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"four "')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.continue ('continue')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('5')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.line_comment ('// valid: ends with 'goto' (explicit fall-through to next case.)')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('message')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"five "')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.goto ('goto')
WHITE_SPACE (' ')
DLangTokenType.case ('case')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('6')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.line_comment ('// ERROR: implicit fall-through')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('message')
WHITE_SPACE (' ')
DLangTokenType.~= ('~=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"six "')
DLangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('1')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.line_comment ('// valid: the body is empty')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DLangTokenType.case ('case')
WHITE_SPACE (' ')
DLangTokenType.INTEGER_LITERAL ('2')
DLangTokenType.: (':')
WHITE_SPACE ('     ')
DLangTokenType.line_comment ('// valid: this is the last case in the switch statement.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DLangTokenType.ID ('message')
WHITE_SPACE (' ')
DLangTokenType.= ('=')
WHITE_SPACE (' ')
DLangTokenType.DOUBLE_QUOTED_STRING ('"one or two"')
DLangTokenType.; (';')
WHITE_SPACE ('\n')
DLangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DLangTokenType.} ('}')